// next.config.js
const path = require('path');

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  // Disable static optimization to avoid prerendering errors
  output: 'standalone',
  
  webpack: (config, { webpack }) => {
    // Target fix for "Cannot read properties of undefined (reading 'call')" error
    
    // Add DefinePlugin to ensure proper environment variables
    config.plugins = config.plugins || [];
    config.plugins.push(
      new webpack.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'development')
      })
    );
    
    // Fix for options.factory issue in webpack
    // This intercepts the NormalModule creation process
    const rules = config.module.rules.map(rule => {
      if (rule.oneOf) {
        return {
          ...rule,
          oneOf: rule.oneOf.map(r => {
            if (r.use && Array.isArray(r.use)) {
              r.use = r.use.map(u => {
                // Ensure any loader options are properly defined
                if (typeof u === 'object' && u.options) {
                  return {
                    ...u,
                    options: u.options || {}
                  };
                }
                return u;
              });
            }
            return r;
          })
        };
      }
      return rule;
    });
    
    config.module = {
      ...config.module,
      rules,
      // Disable strict context evaluation
      exprContextCritical: false,
      unknownContextCritical: false
    };
    
    // Ensure webpack can properly handle module resolution
    config.resolve = {
      ...config.resolve,
      // Explicitly set modules to include node_modules
      modules: ['node_modules', path.resolve(__dirname, 'node_modules')],
      // Add stable extensions resolution
      extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
      // Provide fallbacks for Node.js modules
      fallback: {
        ...config.resolve?.fallback,
        fs: false,
        path: false,
        os: false
      }
    };
    
    return config;
  },
  compiler: {
    styledComponents: true
  },
  typescript: {
    ignoreBuildErrors: true
  },
  eslint: {
    ignoreDuringBuilds: true
  }
};

module.exports = nextConfig; 
