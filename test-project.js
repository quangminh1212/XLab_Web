/**
 * XLab Web - Test Project
 * 
 * Script ki·ªÉm tra to√†n di·ªán d·ª± √°n
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=== XLab Web Project Validator ===');

// Ki·ªÉm tra c·∫•u tr√∫c d·ª± √°n
function checkProjectStructure() {
  console.log('üîç Ki·ªÉm tra c·∫•u tr√∫c d·ª± √°n...');
  
  const requiredDirs = [
    'src/app',
    'src/components',
    'src/lib',
    'src/models',
    'public',
    'public/images'
  ];
  
  let allExists = true;
  
  for (const dir of requiredDirs) {
    const dirPath = path.join(__dirname, dir);
    if (!fs.existsSync(dirPath)) {
      console.error(`‚ùå Th∆∞ m·ª•c ${dir} kh√¥ng t·ªìn t·∫°i`);
      allExists = false;
    }
  }
  
  if (allExists) {
    console.log('‚úÖ C·∫•u tr√∫c d·ª± √°n ƒë·∫ßy ƒë·ªß');
  }
  
  return allExists;
}

// Ki·ªÉm tra c·∫•u h√¨nh Next.js
function checkNextConfig() {
  console.log('üîç Ki·ªÉm tra c·∫•u h√¨nh Next.js...');
  
  const nextConfigPath = path.join(__dirname, 'next.config.js');
  if (!fs.existsSync(nextConfigPath)) {
    console.error('‚ùå File next.config.js kh√¥ng t·ªìn t·∫°i');
    return false;
  }
  
  try {
    const content = fs.readFileSync(nextConfigPath, 'utf8');
    
    // Ki·ªÉm tra c√°c t√πy ch·ªçn kh√¥ng h·ª£p l·ªá
    const invalidOptions = [
      'skipMiddlewareUrlNormalize',
      'disableOptimizedLoading',
      'swcTraceProfiling'
    ];
    
    let foundInvalidOptions = false;
    
    for (const option of invalidOptions) {
      if (content.includes(option + ':') || content.includes(`"${option}":`)) {
        console.error(`‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá trong next.config.js: ${option}`);
        foundInvalidOptions = true;
      }
    }
    
    if (!foundInvalidOptions) {
      console.log('‚úÖ File next.config.js kh√¥ng c√≥ t√πy ch·ªçn kh√¥ng h·ª£p l·ªá');
    }
    
    return !foundInvalidOptions;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra next.config.js:', error);
    return false;
  }
}

// Ki·ªÉm tra package.json
function checkPackageJson() {
  console.log('üîç Ki·ªÉm tra dependencies trong package.json...');
  
  const packageJsonPath = path.join(__dirname, 'package.json');
  if (!fs.existsSync(packageJsonPath)) {
    console.error('‚ùå File package.json kh√¥ng t·ªìn t·∫°i');
    return false;
  }
  
  try {
    const content = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const dependencies = { ...content.dependencies, ...content.devDependencies };
    
    // Ki·ªÉm tra c√°c package c·∫ßn thi·∫øt
    const requiredPackages = [
      'next',
      'react',
      'react-dom',
      'typescript'
    ];
    
    let missingPackages = [];
    
    for (const pkg of requiredPackages) {
      if (!dependencies[pkg]) {
        missingPackages.push(pkg);
      }
    }
    
    if (missingPackages.length > 0) {
      console.error(`‚ùå Thi·∫øu c√°c package: ${missingPackages.join(', ')}`);
      return false;
    }
    
    console.log('‚úÖ C√°c package c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
    return true;
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra package.json:', error);
    return false;
  }
}

// Ki·ªÉm tra c√°c file m√¥i tr∆∞·ªùng
function checkEnvironmentFiles() {
  console.log('üîç Ki·ªÉm tra c·∫•u h√¨nh m√¥i tr∆∞·ªùng...');
  
  // Ki·ªÉm tra .env.local
  const envLocalPath = path.join(__dirname, '.env.local');
  if (!fs.existsSync(envLocalPath)) {
    console.log('‚ö†Ô∏è File .env.local kh√¥ng t·ªìn t·∫°i, t·∫°o file m·∫´u...');
    
    const envContent = `NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=your_nextauth_secret_key_here
NEXT_PUBLIC_API_URL=http://localhost:3000/api
NEXT_TELEMETRY_DISABLED=1
NEXT_IGNORE_WARNINGS=NEXT_PACKAGE_WARNING,ESLINT_WARNING,API_ROUTE_IMPORT_WARNING
NEXT_DISABLE_TRACE=1
NODE_OPTIONS=--no-warnings`;
    
    try {
      fs.writeFileSync(envLocalPath, envContent, 'utf8');
      console.log('‚úÖ ƒê√£ t·∫°o file .env.local m·∫´u');
    } catch (error) {
      console.error('‚ùå Kh√¥ng th·ªÉ t·∫°o file .env.local:', error);
    }
  } else {
    console.log('‚úÖ File .env.local ƒë√£ t·ªìn t·∫°i');
  }
  
  return true;
}

// Ki·ªÉm tra c√°c file t·∫°m th·ªùi v√† x√≥a
function cleanTemporaryFiles() {
  console.log('üßπ D·ªçn d·∫πp c√°c file t·∫°m...');
  
  const tempFiles = [
    '.next/trace',
    '.next/trace.*',
    'next-fix-all.log'
  ];
  
  for (const pattern of tempFiles) {
    try {
      if (pattern.includes('*')) {
        const dir = path.dirname(pattern);
        const basePattern = path.basename(pattern).replace('*', '');
        
        if (fs.existsSync(path.join(__dirname, dir))) {
          const files = fs.readdirSync(path.join(__dirname, dir));
          for (const file of files) {
            if (file.includes(basePattern)) {
              fs.unlinkSync(path.join(__dirname, dir, file));
              console.log(`‚úÖ ƒê√£ x√≥a file: ${path.join(dir, file)}`);
            }
          }
        }
      } else {
        const filePath = path.join(__dirname, pattern);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ ƒê√£ x√≥a file: ${pattern}`);
        }
      }
    } catch (error) {
      console.error(`‚ùå L·ªói khi x√≥a file ${pattern}:`, error);
    }
  }
  
  console.log('‚úÖ ƒê√£ d·ªçn d·∫πp c√°c file t·∫°m');
  return true;
}

// Ch·∫°y ki·ªÉm tra
async function runTests() {
  const results = {
    structure: checkProjectStructure(),
    nextConfig: checkNextConfig(),
    packageJson: checkPackageJson(),
    environment: checkEnvironmentFiles(),
    cleanup: cleanTemporaryFiles()
  };
  
  console.log('\n=== K·∫øt qu·∫£ ki·ªÉm tra ===');
  
  let allPassed = true;
  for (const [test, result] of Object.entries(results)) {
    console.log(`${result ? '‚úÖ' : '‚ùå'} ${test}: ${result ? 'ƒê·∫°t' : 'Kh√¥ng ƒë·∫°t'}`);
    if (!result) allPassed = false;
  }
  
  if (allPassed) {
    console.log('\n‚úÖ D·ª± √°n ƒë√£ s·∫µn s√†ng v√† kh√¥ng c√≥ l·ªói ti·ªÅm ·∫©n');
    return true;
  } else {
    console.log('\n‚ö†Ô∏è D·ª± √°n c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c');
    return false;
  }
}

// Ch·∫°y ki·ªÉm tra v√† t·ª± ƒë·ªông s·ª≠a l·ªói n·∫øu c·∫ßn
async function main() {
  const testResult = await runTests();
  
  if (!testResult) {
    console.log('\nüîÑ ƒêang ch·∫°y script s·ª≠a l·ªói to√†n di·ªán...');
    try {
      execSync('node fix-all-errors.js', { stdio: 'inherit' });
      console.log('‚úÖ ƒê√£ ch·∫°y script s·ª≠a l·ªói to√†n di·ªán');
      
      // Ch·∫°y l·∫°i ki·ªÉm tra
      console.log('\nüîÑ Ch·∫°y l·∫°i ki·ªÉm tra sau khi s·ª≠a l·ªói...');
      await runTests();
    } catch (error) {
      console.error('‚ùå L·ªói khi ch·∫°y script s·ª≠a l·ªói:', error);
    }
  }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
main().catch(error => {
  console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error);
  process.exit(1);
}); 