// fixall.js - Consolidated fix script for XLab_Web
// Combines functionality from multiple fix scripts into one comprehensive utility

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('============================================');
console.log('       XLab_Web - C√¥ng c·ª• s·ª≠a l·ªói t·ª± ƒë·ªông   ');
console.log('============================================');
console.log('');

// Ki·ªÉm tra tham s·ªë d√≤ng l·ªánh
const args = process.argv.slice(2);
const runAll = args.length === 0 || args.includes('all');
const runTraceError = runAll || args.includes('trace');
const runComponents = runAll || args.includes('components');
const runAccounts = runAll || args.includes('accounts');
const runCleanCache = runAll || args.includes('cache');

// 1. FIX TRACE ERRORS
if (runTraceError) {
  console.log('===== 1. S·ª¨A L·ªñI TRACE FILE =====');
  fixTraceErrors();
  console.log('');
}

// 2. FIX COMPONENTS
if (runComponents) {
  console.log('===== 2. S·ª¨A L·ªñI COMPONENTS =====');
  fixComponents();
  console.log('');
}

// 3. FIX ACCOUNTS PAGE
if (runAccounts) {
  console.log('===== 3. S·ª¨A L·ªñI ACCOUNTS PAGE =====');
  fixAccountsPage();
  console.log('');
}

// 4. CLEAN CACHE
if (runCleanCache) {
  console.log('===== 4. X√ìA CACHE NEXT.JS =====');
  cleanNextCache();
  console.log('');
}

console.log('============================================');
console.log('    üéâ Qu√° tr√¨nh s·ª≠a l·ªói ƒë√£ ho√†n t·∫•t!    ');
console.log('============================================');
console.log('B·∫°n c√≥ th·ªÉ ch·∫°y "npm run dev" ƒë·ªÉ kh·ªüi ƒë·ªông d·ª± √°n.');
console.log('');

// IMPLEMENTATION OF FIX FUNCTIONS

/**
 * S·ª≠a l·ªói trace file trong Next.js
 */
function fixTraceErrors() {
  console.log('ƒêang s·ª≠a l·ªói trace file...');

  // ƒê·∫£m b·∫£o th∆∞ m·ª•c .next t·ªìn t·∫°i
  const nextDir = path.join(__dirname, '.next');
  if (!fs.existsSync(nextDir)) {
    fs.mkdirSync(nextDir, { recursive: true });
    console.log('ƒê√£ t·∫°o th∆∞ m·ª•c .next');
  }

  // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ªõi file trace
  const traceFile = path.join(nextDir, 'trace');
  const traceBackup = path.join(nextDir, 'trace.old');

  // X√≥a file trace c≈© n·∫øu t·ªìn t·∫°i
  if (fs.existsSync(traceFile)) {
    try {
      // Tr√™n Windows, ƒë√¥i khi c·∫ßn ph·∫£i g·ª° b·ªè thu·ªôc t√≠nh read-only
      if (process.platform === 'win32') {
        try {
          execSync(`attrib -r "${traceFile}"`, { stdio: 'ignore' });
          console.log('ƒê√£ lo·∫°i b·ªè thu·ªôc t√≠nh read-only c·ªßa file trace');
        } catch (err) {
          console.warn('Kh√¥ng th·ªÉ thay ƒë·ªïi thu·ªôc t√≠nh file:', err.message);
        }
      }
      
      fs.unlinkSync(traceFile);
      console.log('ƒê√£ x√≥a th√†nh c√¥ng file trace');
    } catch (err) {
      console.warn('Kh√¥ng th·ªÉ x√≥a file trace tr·ª±c ti·∫øp:', err.message);
      
      // N·∫øu x√≥a th·∫•t b·∫°i, th·ª≠ ƒë·ªïi t√™n file (gi·∫£i quy·∫øt m·ªôt s·ªë lock tr√™n Windows)
      try {
        fs.renameSync(traceFile, traceBackup);
        console.log('ƒê√£ ƒë·ªïi t√™n file trace th√†nh trace.old');
        
        // Th·ª≠ x√≥a b·∫£n backup sau khi ƒë·ªïi t√™n
        try {
          fs.unlinkSync(traceBackup);
          console.log('ƒê√£ x√≥a file trace.old');
        } catch (backupErr) {
          console.warn('Kh√¥ng th·ªÉ x√≥a file trace.old:', backupErr.message);
        }
      } catch (renameErr) {
        console.warn('Kh√¥ng th·ªÉ ƒë·ªïi t√™n file trace:', renameErr.message);
      }
    }
  }

  // T·∫°o file trace m·ªõi v·ªõi quy·ªÅn th√≠ch h·ª£p
  try {
    // T·∫°o v·ªõi flag wx ƒë·ªÉ fail n·∫øu file ƒë√£ t·ªìn t·∫°i (tr√°nh race condition)
    fs.writeFileSync(traceFile, '', { flag: 'w' });
    console.log('ƒê√£ t·∫°o file trace m·ªõi v·ªõi quy·ªÅn th√≠ch h·ª£p');
    
    // Tr√™n Windows, ƒë·∫£m b·∫£o file c√≥ quy·ªÅn th√≠ch h·ª£p
    if (process.platform === 'win32') {
      try {
        execSync(`attrib -r "${traceFile}"`, { stdio: 'ignore' });
        console.log('ƒê√£ ƒë·∫£m b·∫£o file trace kh√¥ng c√≥ thu·ªôc t√≠nh read-only');
      } catch (err) {
        console.warn('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p thu·ªôc t√≠nh file trace:', err.message);
      }
    }
  } catch (createErr) {
    console.error('Kh√¥ng th·ªÉ t·∫°o file trace:', createErr.message);
  }
}

/**
 * S·ª≠a l·ªói c√°c component
 */
function fixComponents() {
  console.log('ƒêang s·ª≠a l·ªói c√°c component...');

  // Fix Container.tsx
  const containerPath = path.join(__dirname, 'src', 'components', 'common', 'Container.tsx');
  if (!fs.existsSync(containerPath)) {
    // T·∫°o Container.tsx n·∫øu kh√¥ng t·ªìn t·∫°i
    const containerContent = `import React from 'react'
import { cn } from '@/lib/utils'

interface ContainerProps {
  children: React.ReactNode
  className?: string
}

export const Container: React.FC<ContainerProps> = ({ 
  children,
  className = ''
}) => {
  return (
    <div className={cn('container mx-auto px-4 md:px-6 max-w-7xl', className)}>
      {children}
    </div>
  )
}

export default Container`;

    try {
      const containerDir = path.dirname(containerPath);
      if (!fs.existsSync(containerDir)) {
        fs.mkdirSync(containerDir, { recursive: true });
      }
      fs.writeFileSync(containerPath, containerContent, { encoding: 'utf8' });
      console.log('ƒê√£ t·∫°o file Container.tsx');
    } catch (err) {
      console.error('L·ªói khi t·∫°o Container.tsx:', err.message);
    }
  } else {
    try {
      let containerContent = fs.readFileSync(containerPath, 'utf8');
      // S·ª≠a l·ªói trong file
      if (containerContent.includes('export default Container   return (') || 
          containerContent.includes('^') || 
          containerContent.includes('Sua loi Container.tsx')) {
        containerContent = `import React from 'react'
import { cn } from '@/lib/utils'

interface ContainerProps {
  children: React.ReactNode
  className?: string
}

export const Container: React.FC<ContainerProps> = ({ 
  children,
  className = ''
}) => {
  return (
    <div className={cn('container mx-auto px-4 md:px-6 max-w-7xl', className)}>
      {children}
    </div>
  )
}

export default Container`;
        fs.writeFileSync(containerPath, containerContent, { encoding: 'utf8' });
        console.log('ƒê√£ s·ª≠a file Container.tsx');
      }
    } catch (err) {
      console.error('L·ªói khi s·ª≠a Container.tsx:', err.message);
    }
  }

  // Fix index.ts
  const indexPath = path.join(__dirname, 'src', 'components', 'common', 'index.ts');
  if (!fs.existsSync(indexPath)) {
    // T·∫°o index.ts n·∫øu n√≥ kh√¥ng t·ªìn t·∫°i
    try {
      const indexDir = path.dirname(indexPath);
      if (!fs.existsSync(indexDir)) {
        fs.mkdirSync(indexDir, { recursive: true });
      }
      fs.writeFileSync(indexPath, 'export { Container } from \'./Container\';\n', { encoding: 'utf8' });
      console.log('ƒê√£ t·∫°o file index.ts');
    } catch (err) {
      console.error('L·ªói khi t·∫°o index.ts:', err.message);
    }
  } else {
    try {
      let indexContent = fs.readFileSync(indexPath, 'utf8');
      // ƒê·∫£m b·∫£o n√≥ export ƒë√∫ng Container
      if (!indexContent.includes('export { Container }')) {
        // Th√™m export n·∫øu kh√¥ng t√¨m th·∫•y
        const newExport = 'export { Container } from \'./Container\';\n';
        if (indexContent.includes('export { default as Container }')) {
          indexContent = indexContent.replace('export { default as Container }', 'export { Container }');
        } else {
          indexContent += newExport;
        }
        fs.writeFileSync(indexPath, indexContent, { encoding: 'utf8' });
        console.log('ƒê√£ s·ª≠a exports trong index.ts');
      }
    } catch (err) {
      console.error('L·ªói khi s·ª≠a index.ts:', err.message);
    }
  }

  // Fix utils.ts n·∫øu kh√¥ng t·ªìn t·∫°i (c·∫ßn thi·∫øt cho h√†m cn)
  const utilsPath = path.join(__dirname, 'src', 'lib', 'utils.ts');
  if (!fs.existsSync(utilsPath)) {
    const utilsContent = `import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}`;

    try {
      const utilsDir = path.dirname(utilsPath);
      if (!fs.existsSync(utilsDir)) {
        fs.mkdirSync(utilsDir, { recursive: true });
        console.log('ƒê√£ t·∫°o th∆∞ m·ª•c lib');
      }
      fs.writeFileSync(utilsPath, utilsContent, { encoding: 'utf8' });
      console.log('ƒê√£ t·∫°o file utils.ts v·ªõi h√†m cn');
    } catch (err) {
      console.error('L·ªói khi t·∫°o utils.ts:', err.message);
    }
  }
}

/**
 * S·ª≠a l·ªói trang accounts/page.tsx
 */
function fixAccountsPage() {
  console.log('ƒêang s·ª≠a l·ªói trang accounts/page.tsx...');

  const accountsPagePath = path.join(__dirname, 'src', 'app', 'accounts', 'page.tsx');

  // N·ªôi dung m·ªõi - s·ª≠ d·ª•ng server-side redirect
  const newContent = `import { redirect } from 'next/navigation'

export default function AccountsPage() {
  redirect('/account')
}`;

  try {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i ho·∫∑c t·∫°o th∆∞ m·ª•c cha
    const accountsDir = path.dirname(accountsPagePath);
    if (!fs.existsSync(accountsDir)) {
      fs.mkdirSync(accountsDir, { recursive: true });
      console.log('ƒê√£ t·∫°o th∆∞ m·ª•c accounts');
    }

    // Lu√¥n ghi n·ªôi dung m·ªõi, b·∫•t k·ªÉ tr·∫°ng th√°i hi·ªán t·∫°i
    fs.writeFileSync(accountsPagePath, newContent, { encoding: 'utf8' });
    console.log('ƒê√£ ghi n·ªôi dung chuy·ªÉn h∆∞·ªõng v√†o accounts/page.tsx');
    
  } catch (err) {
    console.error('L·ªói khi ghi accounts/page.tsx:', err.message);
  }
}

/**
 * T·∫°o file font-manifest.json n·∫øu kh√¥ng t·ªìn t·∫°i
 */
function createFontManifest() {
  console.log('ƒêang t·∫°o file font-manifest.json...');

  const fontManifestPath = path.join(__dirname, '.next', 'server', 'next-font-manifest.json');
  const fontManifestDir = path.dirname(fontManifestPath);

  try {
    // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
    if (!fs.existsSync(fontManifestDir)) {
      fs.mkdirSync(fontManifestDir, { recursive: true });
      console.log(`ƒê√£ t·∫°o th∆∞ m·ª•c: ${fontManifestDir}`);
    }

    // T·∫°o file font-manifest.json n·∫øu kh√¥ng t·ªìn t·∫°i
    if (!fs.existsSync(fontManifestPath)) {
      const emptyFontManifest = {
        pages: {},
        app: {},
        appUsingSizeAdjust: false,
        pagesUsingSizeAdjust: false
      };

      fs.writeFileSync(fontManifestPath, JSON.stringify(emptyFontManifest, null, 2), 'utf8');
      console.log(`ƒê√£ t·∫°o file font-manifest.json t·∫°i ${fontManifestPath}`);
    } else {
      console.log('File font-manifest.json ƒë√£ t·ªìn t·∫°i.');
    }
  } catch (err) {
    console.error(`L·ªói khi t·∫°o file font-manifest.json: ${err.message}`);
  }
}

/**
 * X√≥a cache Next.js
 */
function cleanNextCache() {
  console.log('ƒêang x√≥a cache Next.js...');

  // H√†m ƒë·ªÉ x√≥a an to√†n m·ªôt th∆∞ m·ª•c ƒë·ªá quy
  function deleteFolderRecursive(directoryPath) {
    if (fs.existsSync(directoryPath)) {
      fs.readdirSync(directoryPath).forEach((file) => {
        const curPath = path.join(directoryPath, file);
        if (fs.lstatSync(curPath).isDirectory()) {
          // G·ªçi ƒë·ªá quy
          deleteFolderRecursive(curPath);
        } else {
          // X√≥a file
          try {
            fs.unlinkSync(curPath);
          } catch (err) {
            console.error(`Kh√¥ng th·ªÉ x√≥a file ${curPath}: ${err.message}`);
          }
        }
      });
      
      try {
        fs.rmdirSync(directoryPath);
        console.log(`ƒê√£ x√≥a th∆∞ m·ª•c: ${directoryPath}`);
      } catch (err) {
        console.error(`Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c ${directoryPath}: ${err.message}`);
      }
    }
  }

  // X√≥a c√°c th∆∞ m·ª•c cache c·ª• th·ªÉ
  const nextCacheDir = path.join(__dirname, '.next', 'cache');
  if (fs.existsSync(nextCacheDir)) {
    // X√≥a cache webpack
    const webpackCacheDir = path.join(nextCacheDir, 'webpack');
    if (fs.existsSync(webpackCacheDir)) {
      deleteFolderRecursive(webpackCacheDir);
      console.log('ƒê√£ x√≥a cache webpack');
    }
    
    // X√≥a cache SWC
    const swcCacheDir = path.join(nextCacheDir, 'swc');
    if (fs.existsSync(swcCacheDir)) {
      deleteFolderRecursive(swcCacheDir);
      console.log('ƒê√£ x√≥a cache SWC');
    }
  }

  // T·∫°o l·∫°i th∆∞ m·ª•c .next n·∫øu kh√¥ng t·ªìn t·∫°i
  const nextDir = path.join(__dirname, '.next');
  if (!fs.existsSync(nextDir)) {
    fs.mkdirSync(nextDir, { recursive: true });
    console.log('ƒê√£ t·∫°o th∆∞ m·ª•c .next');
  }

  // S·ª≠a file trace
  const traceFile = path.join(nextDir, 'trace');
  if (fs.existsSync(traceFile)) {
    try {
      // Tr√™n Windows, x√≥a thu·ªôc t√≠nh read-only
      if (process.platform === 'win32') {
        try {
          execSync(`attrib -r "${traceFile}"`, { stdio: 'ignore' });
        } catch (err) {
          console.warn('Kh√¥ng th·ªÉ s·ª≠a thu·ªôc t√≠nh file:', err.message);
        }
      }
      
      fs.unlinkSync(traceFile);
      console.log('ƒê√£ x√≥a file trace');
    } catch (err) {
      console.warn('Kh√¥ng th·ªÉ x√≥a file trace:', err.message);
    }
  }

  // T·∫°o file trace tr·ªëng
  try {
    fs.writeFileSync(traceFile, '', { flag: 'w' });
    console.log('ƒê√£ t·∫°o file trace m·ªõi v·ªõi quy·ªÅn th√≠ch h·ª£p');
  } catch (err) {
    console.error('Kh√¥ng th·ªÉ t·∫°o file trace:', err.message);
  }

  // Th√™m v√†o cu·ªëi h√†m, tr∆∞·ªõc d√≤ng log cu·ªëi
  createFontManifest();

  console.log('Qu√° tr√¨nh x√≥a cache Next.js ƒë√£ ho√†n t·∫•t!');
} 