import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'

// VNPay Configuration
const VNP_VERSION = '2.1.0'
const VNP_COMMAND_QUERY = 'querydr'
const VNP_TMN_CODE = process.env.VNPAY_TMN_CODE || 'SANDBOX_TEST'
const VNP_SECRET_KEY = process.env.VNPAY_SECRET_KEY || 'SANDBOX_SECRET_KEY'
const VNP_API_URL = process.env.VNPAY_API_URL || 'https://sandbox.vnpayment.vn/merchant_webapi/api/transaction'
const PAYMENT_DEMO_MODE = process.env.PAYMENT_DEMO_MODE === 'true'

// H√†m t·∫°o secure hash theo chu·∫©n VNPay
function createSecureHash(data: string, secretKey: string): string {
  return crypto
    .createHmac('sha512', secretKey)
    .update(data, 'utf-8')
    .digest('hex')
}

// H√†m format th·ªùi gian theo chu·∫©n VNPay (yyyyMMddHHmmss)
function formatDateTime(date: Date): string {
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  const hours = String(date.getHours()).padStart(2, '0')
  const minutes = String(date.getMinutes()).padStart(2, '0')
  const seconds = String(date.getSeconds()).padStart(2, '0')
  
  return `${year}${month}${day}${hours}${minutes}${seconds}`
}

// API ƒë·ªÉ query tr·∫°ng th√°i giao d·ªãch t·ª´ VNPay
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { orderId, transactionDate, amount } = body

    if (!orderId || !transactionDate) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      )
    }

    // Ki·ªÉm tra n·∫øu ·ªü demo mode ho·∫∑c kh√¥ng c√≥ credentials th·∫≠t
    const isDemo = PAYMENT_DEMO_MODE || 
                   VNP_TMN_CODE === 'DEMO_MODE' || 
                   VNP_TMN_CODE === 'SANDBOX_TEST' ||
                   process.env.NODE_ENV === 'development'

    if (isDemo) {
      console.log('üé≠ Running in DEMO MODE - Simulating VNPay response')
      
      // Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      // Gi·∫£ l·∫≠p response th√†nh c√¥ng
      return NextResponse.json({
        success: true,
        status: '00', // Th√†nh c√¥ng
        statusText: 'Giao d·ªãch thanh to√°n th√†nh c√¥ng (Demo)',
        transactionNo: `DEMO${Date.now()}`,
        amount: amount || 29800000,
        bankCode: 'DEMO_BANK',
        payDate: formatDateTime(new Date()),
        isDemo: true,
        message: 'ƒê√¢y l√† giao d·ªãch demo - kh√¥ng c√≥ ti·ªÅn th·∫≠t ƒë∆∞·ª£c chuy·ªÉn'
      })
    }

    // T·∫°o request ID unique
    const requestId = `REQ${Date.now()}`
    const createDate = formatDateTime(new Date())
    const ipAddr = request.headers.get('x-forwarded-for') || 
                   request.headers.get('x-real-ip') || 
                   '127.0.0.1'

    // T·∫°o d·ªØ li·ªáu ƒë·ªÉ hash
    const dataToHash = [
      requestId,
      VNP_VERSION,
      VNP_COMMAND_QUERY,
      VNP_TMN_CODE,
      orderId,
      transactionDate,
      createDate,
      ipAddr,
      `Payment for order ${orderId}`
    ].join('|')

    const secureHash = createSecureHash(dataToHash, VNP_SECRET_KEY)

    // Payload g·ª≠i t·ªõi VNPay
    const vnpayPayload = {
      vnp_RequestId: requestId,
      vnp_Version: VNP_VERSION,
      vnp_Command: VNP_COMMAND_QUERY,
      vnp_TmnCode: VNP_TMN_CODE,
      vnp_TxnRef: orderId,
      vnp_OrderInfo: `Payment for order ${orderId}`,
      vnp_TransactionDate: transactionDate,
      vnp_CreateDate: createDate,
      vnp_IpAddr: ipAddr,
      vnp_SecureHash: secureHash
    }

    console.log('VNPay Query Request:', vnpayPayload)

    // G·ªçi API VNPay
    const vnpayResponse = await fetch(VNP_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(vnpayPayload)
    })

    const vnpayResult = await vnpayResponse.json()
    console.log('VNPay Query Response:', vnpayResult)

    // X·ª≠ l√Ω response t·ª´ VNPay
    if (vnpayResult.vnp_ResponseCode === '00') {
      // Ki·ªÉm tra tr·∫°ng th√°i giao d·ªãch
      const transactionStatus = vnpayResult.vnp_TransactionStatus
      
      return NextResponse.json({
        success: true,
        status: transactionStatus,
        statusText: getTransactionStatusText(transactionStatus),
        transactionNo: vnpayResult.vnp_TransactionNo,
        amount: vnpayResult.vnp_Amount,
        bankCode: vnpayResult.vnp_BankCode,
        payDate: vnpayResult.vnp_PayDate,
        data: vnpayResult
      })
    } else {
      // N·∫øu c√≥ l·ªói t·ª´ VNPay nh∆∞ng ƒëang ·ªü dev mode, fallback sang demo
      if (process.env.NODE_ENV === 'development' && vnpayResult.vnp_ResponseCode === '02') {
        console.log('‚ö†Ô∏è VNPay API error in development - falling back to demo mode')
        
        return NextResponse.json({
          success: true,
          status: '00',
          statusText: 'Giao d·ªãch th√†nh c√¥ng (Fallback demo)',
          transactionNo: `FALLBACK${Date.now()}`,
          amount: amount || 29800000,
          bankCode: 'FALLBACK_BANK',
          payDate: formatDateTime(new Date()),
          isDemo: true,
          message: 'VNPay API kh√¥ng kh·∫£ d·ª•ng - s·ª≠ d·ª•ng demo mode'
        })
      }

      return NextResponse.json({
        success: false,
        error: vnpayResult.vnp_Message || 'Unknown error from VNPay',
        code: vnpayResult.vnp_ResponseCode
      })
    }

  } catch (error) {
    console.error('VNPay API Error:', error)
    
    // Fallback demo mode cho t·∫•t c·∫£ l·ªói trong development
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Error in development - using demo response')
      
      // Gi·∫£ l·∫≠p tr·∫°ng th√°i th√†nh c√¥ng sau 1 gi√¢y
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      return NextResponse.json({
        success: true,
        status: '00', // Th√†nh c√¥ng
        statusText: 'Giao d·ªãch thanh to√°n th√†nh c√¥ng (Error fallback)',
        transactionNo: `ERR${Date.now()}`,
        amount: 29800000, // Demo amount
        bankCode: 'ERROR_FALLBACK',
        payDate: formatDateTime(new Date()),
        isDemo: true
      })
    }

    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// H√†m chuy·ªÉn ƒë·ªïi m√£ tr·∫°ng th√°i th√†nh text
function getTransactionStatusText(status: string): string {
  const statusMap: Record<string, string> = {
    '00': 'Giao d·ªãch thanh to√°n th√†nh c√¥ng',
    '01': 'Giao d·ªãch ch∆∞a ho√†n t·∫•t',
    '02': 'Giao d·ªãch b·ªã l·ªói',
    '04': 'Giao d·ªãch ƒë·∫£o (Kh√°ch h√†ng ƒë√£ b·ªã tr·ª´ ti·ªÅn t·∫°i Ng√¢n h√†ng nh∆∞ng GD ch∆∞a th√†nh c√¥ng ·ªü VNPAY)',
    '05': 'VNPAY ƒëang x·ª≠ l√Ω giao d·ªãch n√†y (GD ho√†n ti·ªÅn)',
    '06': 'VNPAY ƒë√£ g·ª≠i y√™u c·∫ßu ho√†n ti·ªÅn sang Ng√¢n h√†ng (GD ho√†n ti·ªÅn)',
    '07': 'Giao d·ªãch b·ªã nghi ng·ªù gian l·∫≠n',
    '09': 'GD Ho√†n tr·∫£ b·ªã t·ª´ ch·ªëi'
  }
  
  return statusMap[status] || 'Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh'
} 