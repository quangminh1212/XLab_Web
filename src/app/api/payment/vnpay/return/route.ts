import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'

// VNPay Configuration
const VNP_SECRET_KEY = process.env.VNPAY_SECRET_KEY || 'SANDBOX_SECRET_KEY'

// H√†m s·∫Øp x·∫øp object theo alphabet ƒë·ªÉ t·∫°o hash
function sortObject(obj: Record<string, any>): Record<string, any> {
  const sorted: Record<string, any> = {}
  const keys = Object.keys(obj).sort()
  
  for (const key of keys) {
    sorted[key] = obj[key]
  }
  
  return sorted
}

// H√†m t·∫°o secure hash ƒë·ªÉ verify d·ªØ li·ªáu t·ª´ VNPay
function createSecureHash(data: string, secretKey: string): string {
  return crypto
    .createHmac('sha512', secretKey)
    .update(data, 'utf-8')
    .digest('hex')
}

// H√†m l·∫•y text m√¥ t·∫£ t·ª´ response code
function getResponseCodeText(code: string): string {
  const codeMap: Record<string, string> = {
    '00': 'Giao d·ªãch th√†nh c√¥ng',
    '07': 'Tr·ª´ ti·ªÅn th√†nh c√¥ng. Giao d·ªãch b·ªã nghi ng·ªù (li√™n quan t·ªõi l·ª´a ƒë·∫£o, giao d·ªãch b·∫•t th∆∞·ªùng)',
    '09': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• InternetBanking t·∫°i ng√¢n h√†ng',
    '10': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng x√°c th·ª±c th√¥ng tin th·∫ª/t√†i kho·∫£n kh√¥ng ƒë√∫ng qu√° 3 l·∫ßn',
    '11': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n. Xin qu√Ω kh√°ch vui l√≤ng th·ª±c hi·ªán l·∫°i giao d·ªãch',
    '12': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Th·∫ª/T√†i kho·∫£n c·ªßa kh√°ch h√†ng b·ªã kh√≥a',
    '13': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do Qu√Ω kh√°ch nh·∫≠p sai m·∫≠t kh·∫©u x√°c th·ª±c giao d·ªãch (OTP)',
    '24': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: Kh√°ch h√†ng h·ªßy giao d·ªãch',
    '51': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa qu√Ω kh√°ch kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch',
    '65': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: T√†i kho·∫£n c·ªßa Qu√Ω kh√°ch ƒë√£ v∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch trong ng√†y',
    '75': 'Ng√¢n h√†ng thanh to√°n ƒëang b·∫£o tr√¨',
    '79': 'Giao d·ªãch kh√¥ng th√†nh c√¥ng do: KH nh·∫≠p sai m·∫≠t kh·∫©u thanh to√°n qu√° s·ªë l·∫ßn quy ƒë·ªãnh',
    '97': 'L·ªói checksum - D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
    '99': 'C√°c l·ªói kh√°c'
  }
  
  return codeMap[code] || 'M√£ l·ªói kh√¥ng x√°c ƒë·ªãnh'
}

// VNPay Return URL - X·ª≠ l√Ω khi VNPay redirect v·ªÅ
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    
    // L·∫•y t·∫•t c·∫£ parameters t·ª´ VNPay
    const vnp_Params: Record<string, string> = {}
    searchParams.forEach((value, key) => {
      vnp_Params[key] = value
    })

    console.log('üîô VNPay Return URL received:', vnp_Params)

    // L·∫•y secure hash t·ª´ VNPay
    const secureHash = vnp_Params['vnp_SecureHash']
    
    // X√≥a hash kh·ªèi params ƒë·ªÉ verify
    delete vnp_Params['vnp_SecureHash']
    delete vnp_Params['vnp_SecureHashType']

    // S·∫Øp x·∫øp params theo alphabet
    const sortedParams = sortObject(vnp_Params)
    
    // T·∫°o query string ƒë·ªÉ hash
    const signData = new URLSearchParams(sortedParams).toString()
    
    // T·∫°o hash ƒë·ªÉ so s√°nh
    const signed = createSecureHash(signData, VNP_SECRET_KEY)
    
    const responseCode = vnp_Params['vnp_ResponseCode'] || '99'
    const orderId = vnp_Params['vnp_TxnRef']
    const amount = vnp_Params['vnp_Amount']
    const transactionNo = vnp_Params['vnp_TransactionNo']
    const bankCode = vnp_Params['vnp_BankCode']

    let result = {
      success: false,
      responseCode,
      message: '',
      orderId,
      amount: amount ? parseInt(amount) / 100 : 0, // VNPay tr·∫£ v·ªÅ amount * 100
      transactionNo,
      bankCode,
      isValidChecksum: false
    }

    // Verify hash ƒë·ªÉ ƒë·∫£m b·∫£o d·ªØ li·ªáu t·ª´ VNPay
    if (secureHash === signed) {
      console.log('‚úÖ Return URL - Hash verification successful!')
      result.isValidChecksum = true
      
      if (responseCode === '00') {
        result.success = true
        result.message = 'Thanh to√°n th√†nh c√¥ng!'
      } else {
        result.message = getResponseCodeText(responseCode)
      }
      
    } else {
      console.error('‚ùå Return URL - Hash verification failed!')
      result.message = 'L·ªói x√°c th·ª±c d·ªØ li·ªáu - Giao d·ªãch kh√¥ng h·ª£p l·ªá'
      result.responseCode = '97'
    }

    console.log('üìä Payment result:', result)

    // Redirect v·ªÅ trang k·∫øt qu·∫£ v·ªõi th√¥ng tin giao d·ªãch
    const resultUrl = new URL('/payment/result', request.url)
    resultUrl.searchParams.set('success', result.success.toString())
    resultUrl.searchParams.set('message', result.message)
    resultUrl.searchParams.set('orderId', result.orderId || '')
    resultUrl.searchParams.set('amount', result.amount.toString())
    resultUrl.searchParams.set('transactionNo', result.transactionNo || '')
    resultUrl.searchParams.set('responseCode', result.responseCode)

    // Redirect v·ªÅ trang k·∫øt qu·∫£
    return NextResponse.redirect(resultUrl.toString())

  } catch (error) {
    console.error('üí• VNPay Return URL Error:', error)
    
    // Redirect v·ªÅ trang l·ªói
    const errorUrl = new URL('/payment/result', request.url)
    errorUrl.searchParams.set('success', 'false')
    errorUrl.searchParams.set('message', 'L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n')
    errorUrl.searchParams.set('responseCode', '99')

    return NextResponse.redirect(errorUrl.toString())
  }
} 