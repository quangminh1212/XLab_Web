/**
 * Script c·∫≠p nh·∫≠t component admin ƒë·ªÉ ƒë·ªìng b·ªô UI v·ªõi ·∫£nh trong database
 * Ch·∫°y: node src/scripts/admin-image-sync.js
 */

const fs = require('fs');
const path = require('path');

// ƒê∆∞·ªùng d·∫´n component admin
const ADMIN_PRODUCT_EDIT_COMPONENT = path.join(process.cwd(), 'src/app/admin/products/[id]/page.tsx');
const ADMIN_PRODUCT_NEW_COMPONENT = path.join(process.cwd(), 'src/app/admin/products/new/page.tsx');

// H√†m c·∫≠p nh·∫≠t file component
const updateComponentFile = (filePath) => {
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file: ${filePath}`);
    return false;
  }

  console.log(`ƒêang c·∫≠p nh·∫≠t file: ${filePath}`);
  let content = fs.readFileSync(filePath, 'utf8');
  
  // T√¨m v√† thay th·∫ø ph·∫ßn x·ª≠ l√Ω h√¨nh ·∫£nh
  let updated = false;

  // 1. Th√™m import getImageNameFromProduct
  if (!content.includes('getImageNameFromProduct')) {
    content = content.replace(
      /import\s+{([^}]*)}\s+from\s+['"]@\/lib\/utils['"]/,
      "import {$1, getImageNameFromProduct} from '@/lib/utils'"
    );

    if (!content.includes('getImageNameFromProduct')) {
      content = content.replace(
        /import\s+([^;]*)\s+from\s+['"]@\/lib\/utils['"]/,
        "import $1, {getImageNameFromProduct} from '@/lib/utils'"
      );
    }

    if (!content.includes('getImageNameFromProduct')) {
      // N·∫øu kh√¥ng c√≥ import t·ª´ utils, th√™m m·ªõi
      content = `import { getImageNameFromProduct } from '@/lib/imageUtils';\n${content}`;
    }

    updated = true;
  }

  // 2. C·∫≠p nh·∫≠t ph·∫ßn x·ª≠ l√Ω handleImageUpload
  if (content.includes('handleImageUpload') && !content.includes('getImageNameFromProduct(')) {
    const oldHandleImageUpload = /const\s+handleImageUpload\s*=\s*async\s*\([^)]*\)\s*=>\s*{[^}]*}/gs;
    const newHandleImageUpload = `const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    try {
      // T·∫°o URL ·∫£nh theo t√™n s·∫£n ph·∫©m
      const productNameForUrl = formData.name || 'product';
      const imageUrl = getImageNameFromProduct(productNameForUrl, null);
      
      // L∆∞u file t·∫°m th·ªùi ƒë·ªÉ hi·ªÉn th·ªã
      const reader = new FileReader();
      reader.onloadend = () => {
        setFeaturedImage(imageUrl);
      };
      reader.readAsDataURL(file);
    } catch (error) {
      console.error('L·ªói khi t·∫£i h√¨nh ·∫£nh:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh l√™n');
    }
  }`;

    content = content.replace(oldHandleImageUpload, newHandleImageUpload);
    updated = true;
  }

  // 3. C·∫≠p nh·∫≠t h√†m handleFileChange cho ·∫£nh m√¥ t·∫£ n·∫øu c√≥
  if (content.includes('handleFileChange') && !content.includes('getImageNameFromProduct(')) {
    const oldHandleFileChange = /const\s+handleFileChange\s*=\s*async\s*\([^)]*\)\s*=>\s*{[^}]*}/gs;
    const newHandleFileChange = `const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    try {
      const productNameForUrl = formData.name || 'product';
      const newImages = Array.from(files).map((_, index) => {
        return getImageNameFromProduct(productNameForUrl, descriptionImages.length + index);
      });

      setDescriptionImages([...descriptionImages, ...newImages]);
    } catch (error) {
      console.error('L·ªói khi t·∫£i h√¨nh ·∫£nh m√¥ t·∫£:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh m√¥ t·∫£');
    }
  }`;

    content = content.replace(oldHandleFileChange, newHandleFileChange);
    updated = true;
  }

  // L∆∞u file n·∫øu c√≥ c·∫≠p nh·∫≠t
  if (updated) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng file: ${filePath}`);
    return true;
  } else {
    console.log(`‚ö†Ô∏è Kh√¥ng c√≥ thay ƒë·ªïi n√†o trong file: ${filePath}`);
    return false;
  }
};

// C·∫≠p nh·∫≠t file utils ƒë·ªÉ th√™m h√†m getImageNameFromProduct n·∫øu ch∆∞a c√≥
const updateUtilsFile = () => {
  const UTILS_FILE = path.join(process.cwd(), 'src/lib/utils.ts');
  
  if (!fs.existsSync(UTILS_FILE)) {
    console.error(`‚ùå Kh√¥ng t√¨m th·∫•y file utils: ${UTILS_FILE}`);
    return false;
  }
  
  console.log(`ƒêang ki·ªÉm tra file utils: ${UTILS_FILE}`);
  let content = fs.readFileSync(UTILS_FILE, 'utf8');
  
  // Ki·ªÉm tra xem ƒë√£ c√≥ h√†m getImageNameFromProduct ch∆∞a
  if (!content.includes('getImageNameFromProduct')) {
    const imageUtilsImport = `import { getImageNameFromProduct } from './imageUtils';\n`;
    if (!content.includes('from \'./imageUtils\'')) {
      content = imageUtilsImport + content;
    }
    
    // Export l·∫°i h√†m getImageNameFromProduct
    const exportStatement = `\nexport { getImageNameFromProduct };\n`;
    content += exportStatement;
    
    fs.writeFileSync(UTILS_FILE, content, 'utf8');
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t file utils ƒë·ªÉ export h√†m getImageNameFromProduct`);
    return true;
  }
  
  return false;
};

// C·∫≠p nh·∫≠t file admin UI
console.log("B·∫Øt ƒë·∫ßu ƒë·ªìng b·ªô h√≥a giao di·ªán admin...");
let updatedFilesCount = 0;

// 1. C·∫≠p nh·∫≠t file utils tr∆∞·ªõc
if (updateUtilsFile()) {
  updatedFilesCount++;
}

// 2. C·∫≠p nh·∫≠t c√°c component admin
if (updateComponentFile(ADMIN_PRODUCT_EDIT_COMPONENT)) {
  updatedFilesCount++;
}

if (updateComponentFile(ADMIN_PRODUCT_NEW_COMPONENT)) {
  updatedFilesCount++;
}

console.log(`\n‚úÖ Ho√†n th√†nh! ƒê√£ c·∫≠p nh·∫≠t ${updatedFilesCount} file.`);
console.log("‚ùó L∆∞u √Ω: N·∫øu c√≥ c√°c component admin kh√°c x·ª≠ l√Ω h√¨nh ·∫£nh, b·∫°n n√™n ki·ªÉm tra v√† c·∫≠p nh·∫≠t th·ªß c√¥ng.");
console.log("üîÑ Kh·ªüi ƒë·ªông l·∫°i server ƒë·ªÉ √°p d·ª•ng c√°c thay ƒë·ªïi."); 