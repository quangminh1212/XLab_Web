/**
 * XLab_Web Maintenance Script
 * - D·ªçn d·∫πp v√† s·ª≠a l·ªói t·ª± ƒë·ªông
 * - T·∫°o c·∫•u tr√∫c file t·ªëi thi·ªÉu cho .next
 * - Qu·∫£n l√Ω c√°c th√†nh ph·∫ßn x√°c th·ª±c
 * - C·∫≠p nh·∫≠t .gitignore
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// C·∫•u h√¨nh
const rootDir = process.cwd();
const nextDir = path.join(rootDir, '.next');

// C√°c th∆∞ m·ª•c c·∫ßn thi·∫øt trong .next
const requiredDirs = [
  path.join(nextDir, 'cache'),
  path.join(nextDir, 'server'),
  path.join(nextDir, 'static'),
  path.join(nextDir, 'static', 'chunks'),
  path.join(nextDir, 'static', 'css'),
  path.join(nextDir, 'static', 'webpack'),
  path.join(nextDir, 'server', 'chunks'),
  path.join(nextDir, 'server', 'pages'),
  path.join(nextDir, 'server', 'vendor-chunks'),
  path.join(nextDir, 'server', 'app')
];

// C√°c m·∫´u c·∫ßn c√≥ trong .gitignore
const gitignorePatterns = [
  '.next/',
  'node_modules/',
  '.DS_Store',
  '*.log',
  'dist/',
  'out/',
  '.env.local',
  '.env.development.local',
  '.env.test.local',
  '.env.production.local',
];

// T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${dirPath}`);
    return true;
  }
  return false;
}

// T·∫°o file v·ªõi n·ªôi dung
function createFileWithContent(filePath, content) {
  const dirPath = path.dirname(filePath);
  ensureDirectoryExists(dirPath);
  
  fs.writeFileSync(filePath, content);
  console.log(`‚úÖ ƒê√£ t·∫°o file: ${filePath}`);
}

// X·ª≠ l√Ω file trace
function fixTraceFile() {
  console.log('üîç Ki·ªÉm tra file trace...');
  
  const tracePath = path.join(nextDir, 'trace');
  if (fs.existsSync(tracePath)) {
    try {
      // ƒê·∫∑t l·∫°i quy·ªÅn truy c·∫≠p
      try {
        fs.chmodSync(tracePath, 0o666);
        console.log('‚úÖ ƒê√£ ƒë·∫∑t l·∫°i quy·ªÅn truy c·∫≠p c·ªßa file trace');
      } catch (chmodErr) {
        console.log('‚ùå Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i quy·ªÅn truy c·∫≠p:', chmodErr.message);
      }

      // X√≥a file trace
      try {
        fs.unlinkSync(tracePath);
        console.log('‚úÖ ƒê√£ x√≥a file trace th√†nh c√¥ng');
      } catch (unlinkErr) {
        console.log('‚ùå Kh√¥ng th·ªÉ x√≥a file trace:', unlinkErr.message);
        
        // Th·ª≠ ph∆∞∆°ng ph√°p kh√°c tr√™n Windows
        try {
          execSync('attrib -r -s -h .next\\trace');
          execSync('del /f /q .next\\trace');
          if (!fs.existsSync(tracePath)) {
            console.log('‚úÖ ƒê√£ x√≥a file trace th√†nh c√¥ng b·∫±ng CMD');
          }
        } catch (cmdErr) {
          console.log('‚ùå V·∫´n kh√¥ng th·ªÉ x√≥a file trace:', cmdErr.message);
        }
      }
    } catch (error) {
      console.log('‚ùå L·ªói khi x·ª≠ l√Ω file trace:', error.message);
    }
  } else {
    console.log('‚úÖ Kh√¥ng t√¨m th·∫•y file trace, kh√¥ng c·∫ßn x·ª≠ l√Ω');
  }
}

// S·ª≠a l·ªói Next.js config
function fixNextConfig() {
  console.log('üîß Ki·ªÉm tra v√† s·ª≠a c·∫•u h√¨nh Next.js...');
  
  const configPath = path.join(rootDir, 'next.config.js');
  if (!fs.existsSync(configPath)) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y file next.config.js');
    return;
  }
  
  // ƒê·ªçc n·ªôi dung file
  const configContent = fs.readFileSync(configPath, 'utf8');
  
  // Ki·ªÉm tra xem outputFileTracingExcludes c√≥ trong experimental kh√¥ng
  const hasExperimentalTracing = configContent.includes('experimental') && 
    configContent.includes('outputFileTracingExcludes') && 
    /experimental\s*:\s*{[^}]*outputFileTracingExcludes/.test(configContent);
  
  if (hasExperimentalTracing) {
    console.log('üîÑ ƒêang s·ª≠a c·∫•u h√¨nh next.config.js...');
    
    // T·∫°o b·∫£n sao l∆∞u n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(`${configPath}.bak`)) {
      try {
        fs.copyFileSync(configPath, `${configPath}.bak`);
        console.log('‚úÖ ƒê√£ t·∫°o b·∫£n sao l∆∞u next.config.js.bak');
      } catch (err) {
        console.log('‚ùå L·ªói khi t·∫°o b·∫£n sao l∆∞u:', err.message);
      }
    }
    
    try {
      // Tr√≠ch xu·∫•t n·ªôi dung c·ªßa outputFileTracingExcludes
      const tracingMatch = /outputFileTracingExcludes\s*:\s*({[^}]*})/.exec(configContent);
      if (tracingMatch && tracingMatch[1]) {
        const tracingContent = tracingMatch[1];
        
        // X√≥a n√≥ kh·ªèi experimental
        let newConfig = configContent.replace(/(\s*outputFileTracingExcludes\s*:\s*{[^}]*}),?/g, '');
        
        // Th√™m n√≥ nh∆∞ m·ªôt t√πy ch·ªçn c·∫•p cao nh·∫•t
        newConfig = newConfig.replace(/(experimental\s*:\s*{[^}]*}\s*),?/g, '$1,\n  outputFileTracingExcludes: ' + tracingContent + ',\n  ');
        
        fs.writeFileSync(configPath, newConfig);
        console.log('‚úÖ ƒê√£ s·ª≠a c·∫•u h√¨nh next.config.js th√†nh c√¥ng');
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m th·∫•y n·ªôi dung outputFileTracingExcludes');
      }
    } catch (err) {
      console.log('‚ùå L·ªói khi s·ª≠a c·∫•u h√¨nh:', err.message);
    }
  } else {
    console.log('‚úÖ C·∫•u h√¨nh next.config.js ƒë√£ h·ª£p l·ªá');
  }
}

// T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c t·ªëi thi·ªÉu cho .next
function createMinimalNextStructure() {
  console.log('üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c t·ªëi thi·ªÉu cho Next.js...');
  
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c .next t·ªìn t·∫°i
  ensureDirectoryExists(nextDir);
  
  // T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
  let createdAny = false;
  for (const dir of requiredDirs) {
    if (ensureDirectoryExists(dir)) {
      createdAny = true;
      
      // T·∫°o file .gitkeep trong m·ªói th∆∞ m·ª•c
      const gitkeepPath = path.join(dir, '.gitkeep');
      if (!fs.existsSync(gitkeepPath)) {
        fs.writeFileSync(gitkeepPath, '');
      }
    }
  }
  
  // T·∫°o file manifest c∆° b·∫£n
  const manifestPath = path.join(nextDir, 'server', 'middleware-manifest.json');
  if (!fs.existsSync(manifestPath)) {
    createFileWithContent(
      manifestPath,
      JSON.stringify({ middleware: {}, functions: {}, version: 2 }, null, 2)
    );
    createdAny = true;
  }
  
  if (createdAny) {
    console.log('‚úÖ ƒê√£ t·∫°o xong c·∫•u tr√∫c th∆∞ m·ª•c t·ªëi thi·ªÉu');
  } else {
    console.log('‚ÑπÔ∏è C·∫•u tr√∫c th∆∞ m·ª•c ƒë√£ ƒë·∫ßy ƒë·ªß');
  }
}

// X√≥a cache v√† file t·∫°m th·ªùi
function cleanupProject() {
  console.log('üßπ D·ªçn d·∫πp d·ª± √°n...');
  
  // X√≥a cache
  const cacheDir = path.join(nextDir, 'cache');
  if (fs.existsSync(cacheDir)) {
    try {
      fs.rmSync(cacheDir, { recursive: true, force: true });
      console.log('‚úÖ ƒê√£ x√≥a cache:', cacheDir);
      
      // T·∫°o l·∫°i th∆∞ m·ª•c cache
      ensureDirectoryExists(cacheDir);
      ensureDirectoryExists(path.join(cacheDir, 'webpack'));
    } catch (error) {
      console.log('‚ùå L·ªói khi x√≥a cache:', error.message);
    }
  }
  
  // X√≥a webpack cache
  const webpackCacheDir = path.join(nextDir, 'static', 'webpack');
  if (fs.existsSync(webpackCacheDir)) {
    try {
      fs.rmSync(webpackCacheDir, { recursive: true, force: true });
      console.log('‚úÖ ƒê√£ x√≥a cache:', webpackCacheDir);
      
      // T·∫°o l·∫°i th∆∞ m·ª•c webpack
      ensureDirectoryExists(webpackCacheDir);
    } catch (error) {
      console.log('‚ùå L·ªói khi x√≥a webpack cache:', error.message);
    }
  }
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t d·ªçn d·∫πp d·ª± √°n');
}

// ƒê·∫£m b·∫£o component withAdminAuth t·ªìn t·∫°i
function ensureAuthComponents() {
  console.log('üîê Ki·ªÉm tra c√°c th√†nh ph·∫ßn x√°c th·ª±c...');
  
  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn component withAdminAuth
  const withAdminAuthPath = path.join(rootDir, 'src', 'components', 'auth', 'withAdminAuth.tsx');
  const authDir = path.join(rootDir, 'src', 'components', 'auth');
  
  // Ki·ªÉm tra xem component ƒë√£ t·ªìn t·∫°i ch∆∞a
  if (!fs.existsSync(withAdminAuthPath)) {
    // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
    ensureDirectoryExists(authDir);
    
    // N·ªôi dung c·ªßa component
    const componentContent = `'use client';

import { useEffect, ComponentType } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { signIn } from 'next-auth/react';

// Higher Order Component ƒë·ªÉ b·∫£o v·ªá c√°c trang admin
function withAdminAuth<P extends object>(Component: ComponentType<P>) {
  return function WithAdminAuth(props: P) {
    const { data: session, status } = useSession();
    const router = useRouter();
    
    useEffect(() => {
      // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang t·∫£i
      if (status === 'loading') return;
      
      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ session th√¨ chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      if (!session) {
        signIn();
        return;
      }
      
      // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng ph·∫£i admin th√¨ chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
      // Gi·∫£ s·ª≠ vai tr√≤ admin ƒë∆∞·ª£c l∆∞u trong session.user.role
      if (session.user && (session.user as any).role !== 'admin') {
        router.push('/');
        return;
      }
    }, [session, status, router]);
    
    // Hi·ªÉn th·ªã m√†n h√¨nh loading trong khi ki·ªÉm tra x√°c th·ª±c
    if (status === 'loading' || !session) {
      return (
        <div className="flex justify-center items-center min-h-screen">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
        </div>
      );
    }
    
    // Ki·ªÉm tra n·∫øu kh√¥ng ph·∫£i admin th√¨ hi·ªÉn th·ªã th√¥ng b√°o
    if (session.user && (session.user as any).role !== 'admin') {
      return (
        <div className="flex flex-col justify-center items-center min-h-screen p-4">
          <h1 className="text-2xl font-bold text-red-600 mb-4">Truy c·∫≠p b·ªã t·ª´ ch·ªëi</h1>
          <p className="text-gray-600 mb-4">B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y.</p>
          <button 
            onClick={() => router.push('/')}
            className="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700"
          >
            Quay v·ªÅ trang ch·ªß
          </button>
        </div>
      );
    }
    
    // N·∫øu ng∆∞·ªùi d√πng l√† admin, hi·ªÉn th·ªã component
    return <Component {...props} />;
  };
}

export default withAdminAuth;`;

    // Ghi n·ªôi dung v√†o file
    createFileWithContent(withAdminAuthPath, componentContent);
    console.log('‚úÖ ƒê√£ t·∫°o component withAdminAuth');
  } else {
    console.log('‚ÑπÔ∏è Component withAdminAuth ƒë√£ t·ªìn t·∫°i');
  }
}

// C·∫≠p nh·∫≠t file .gitignore
function updateGitignore() {
  console.log('üìù Ki·ªÉm tra .gitignore...');
  
  const gitignorePath = path.join(rootDir, '.gitignore');
  
  // N·∫øu kh√¥ng c√≥ file .gitignore, t·∫°o m·ªõi
  if (!fs.existsSync(gitignorePath)) {
    createFileWithContent(gitignorePath, gitignorePatterns.join('\n'));
    console.log('‚úÖ ƒê√£ t·∫°o file .gitignore m·ªõi');
    return;
  }
  
  // ƒê·ªçc n·ªôi dung file .gitignore hi·ªán t·∫°i
  const content = fs.readFileSync(gitignorePath, 'utf8');
  const lines = content.split('\n').map(line => line.trim());
  
  // Ki·ªÉm tra v√† th√™m c√°c m·∫´u c√≤n thi·∫øu
  let updated = false;
  const missingPatterns = gitignorePatterns.filter(pattern => !lines.includes(pattern));
  
  if (missingPatterns.length > 0) {
    // Th√™m c√°c m·∫´u c√≤n thi·∫øu v√†o cu·ªëi file
    const newContent = content + '\n' + missingPatterns.join('\n') + '\n';
    fs.writeFileSync(gitignorePath, newContent);
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t .gitignore v·ªõi c√°c m·∫´u c√≤n thi·∫øu');
    updated = true;
  }
  
  if (!updated) {
    console.log('‚úÖ .gitignore ƒë√£ ch·ª©a t·∫•t c·∫£ c√°c m·∫´u c·∫ßn thi·∫øt');
  }
}

// T·∫°o c√°c file .pack gi·∫£ ƒë·ªÉ tr√°nh l·ªói ENOENT
function createEmptyPackFiles() {
  console.log('üì¶ T·∫°o c√°c file .pack gi·∫£ ƒë·ªÉ tr√°nh l·ªói...');
  
  const webpackDirs = [
    path.join(nextDir, 'cache', 'webpack', 'client-development'),
    path.join(nextDir, 'cache', 'webpack', 'server-development'),
    path.join(nextDir, 'cache', 'webpack', 'edge-server-development')
  ];
  
  webpackDirs.forEach(dir => {
    if (ensureDirectoryExists(dir)) {
      for (let i = 0; i <= 5; i++) {
        const packFile = path.join(dir, `${i}.pack`);
        const packGzFile = path.join(dir, `${i}.pack.gz`);
        
        if (!fs.existsSync(packFile)) {
          fs.writeFileSync(packFile, '');
          console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packFile}`);
        }
        
        if (!fs.existsSync(packGzFile)) {
          fs.writeFileSync(packGzFile, '');
          console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packGzFile}`);
        }
      }
    }
  });
}

// T·∫°o file CSS gi·∫£ v√† file route gi·∫£ cho NextAuth
function createPlaceholderFiles() {
  console.log('üé≠ T·∫°o c√°c file gi·∫£ ƒë·ªÉ tr√°nh l·ªói 404...');
  
  // CSS file
  const cssDir = path.join(nextDir, 'static', 'css');
  ensureDirectoryExists(cssDir);
  
  const cssFile = path.join(cssDir, 'app-layout.css');
  if (!fs.existsSync(cssFile)) {
    fs.writeFileSync(cssFile, '/* Placeholder CSS */');
    console.log(`‚úÖ ƒê√£ t·∫°o file CSS gi·∫£: ${cssFile}`);
  }
  
  // NextAuth route
  const nextAuthDir = path.join(nextDir, 'server', 'app', 'api', 'auth', '[...nextauth]');
  ensureDirectoryExists(nextAuthDir);
  
  const routeFile = path.join(nextAuthDir, 'route.js');
  if (!fs.existsSync(routeFile)) {
    fs.writeFileSync(routeFile, '// Placeholder NextAuth route file');
    console.log(`‚úÖ ƒê√£ t·∫°o file route gi·∫£ cho NextAuth: ${routeFile}`);
  }
}

// Ki·ªÉm tra file .env v√† .env.local
function checkEnvFiles() {
  console.log('üîê Ki·ªÉm tra file m√¥i tr∆∞·ªùng...');
  
  const envPath = path.join(rootDir, '.env');
  const envLocalPath = path.join(rootDir, '.env.local');
  
  if (!fs.existsSync(envPath)) {
    createFileWithContent(envPath, 'NODE_ENV=development\nNEXTAUTH_URL=http://localhost:3000\n');
    console.log('‚úÖ ƒê√£ t·∫°o file .env');
  }
  
  if (!fs.existsSync(envLocalPath)) {
    createFileWithContent(envLocalPath, 'NEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=voZ7iiSzvDrGjrG0m0qkkw60XkANsAg9xf/rGiA4bfA=\n');
    console.log('‚úÖ ƒê√£ t·∫°o file .env.local');
  }
}

// Ch·ª©c nƒÉng ch√≠nh
async function main() {
  console.log('=== B·∫£o tr√¨ d·ª± √°n Next.js ===');
  console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh b·∫£o tr√¨ v√† t·ªëi ∆∞u h√≥a...');
  
  // X·ª≠ l√Ω file trace
  fixTraceFile();
  
  // T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c t·ªëi thi·ªÉu
  createMinimalNextStructure();
  
  // Ki·ªÉm tra v√† s·ª≠a c·∫•u h√¨nh Next.js
  fixNextConfig();
  
  // T·∫°o file gi·∫£ v√† .pack
  createEmptyPackFiles();
  createPlaceholderFiles();
  
  // Ki·ªÉm tra file m√¥i tr∆∞·ªùng
  checkEnvFiles();
  
  // D·ªçn d·∫πp d·ª± √°n
  cleanupProject();
  
  // ƒê·∫£m b·∫£o c√°c th√†nh ph·∫ßn x√°c th·ª±c
  ensureAuthComponents();
  
  // C·∫≠p nh·∫≠t .gitignore
  updateGitignore();
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t qu√° tr√¨nh b·∫£o tr√¨!');
  console.log('üìù B·∫°n c√≥ th·ªÉ kh·ªüi ƒë·ªông d·ª± √°n b√¢y gi·ªù');
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
main().catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
}); 