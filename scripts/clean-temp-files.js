const fs = require('fs');
const path = require('path');

/**
 * Script x√≥a c√°c file t·∫°m v√† c·∫£i thi·ªán hi·ªáu su·∫•t
 * Ph·∫ßn n√†y s·∫Ω x√≥a c√°c file kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng d·ª± √°n
 */

console.log('üßπ ƒêang d·ªçn d·∫πp c√°c file t·∫°m...');

// Danh s√°ch c√°c file t·∫°m c·∫ßn x√≥a
const tempFiles = [
  'output.txt',
  'output-categories.txt',
  '.next/trace',
  '.next/cache/webpack',
  'node_modules/.cache',
];

// X√≥a c√°c file v√† th∆∞ m·ª•c t·∫°m
tempFiles.forEach(filePath => {
  const fullPath = path.join(process.cwd(), filePath);
  
  try {
    if (fs.existsSync(fullPath)) {
      const stats = fs.statSync(fullPath);
      
      if (stats.isDirectory()) {
        // N·∫øu l√† th∆∞ m·ª•c, ch·ªâ x√≥a n·ªôi dung, kh√¥ng x√≥a th∆∞ m·ª•c
        console.log(`üóëÔ∏è ƒêang x√≥a n·ªôi dung th∆∞ m·ª•c: ${filePath}`);
        
        // ƒê·ªçc t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c
        const files = fs.readdirSync(fullPath);
        
        // X√≥a t·ª´ng file
        files.forEach(file => {
          const fileFullPath = path.join(fullPath, file);
          try {
            if (fs.statSync(fileFullPath).isDirectory()) {
              // N·∫øu l√† th∆∞ m·ª•c con, x√≥a ƒë·ªá quy
              fs.rm(fileFullPath, { recursive: true, force: true }, err => {
                if (err) {
                  console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c: ${fileFullPath}`, err);
                }
              });
            } else {
              // N·∫øu l√† file, x√≥a tr·ª±c ti·∫øp
              fs.unlinkSync(fileFullPath);
            }
          } catch (err) {
            console.error(`‚ùå L·ªói khi x√≥a: ${fileFullPath}`, err);
          }
        });
      } else {
        // N·∫øu l√† file ƒë∆°n, x√≥a tr·ª±c ti·∫øp
        console.log(`üóëÔ∏è ƒêang x√≥a file: ${filePath}`);
        fs.unlinkSync(fullPath);
      }
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a ${filePath}:`, error.message);
  }
});

// Ki·ªÉm tra v√† t·∫°o l·∫°i th∆∞ m·ª•c b·∫Øt bu·ªôc
const requiredDirs = [
  '.next/cache/webpack/client-development',
  '.next/cache/webpack/server-development',
  '.next/trace',
];

requiredDirs.forEach(dir => {
  const fullPath = path.join(process.cwd(), dir);
  if (!fs.existsSync(fullPath)) {
    try {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`‚úÖ ƒê√£ t·∫°o l·∫°i th∆∞ m·ª•c: ${dir}`);
    } catch (error) {
      console.error(`‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: ${dir}`, error.message);
    }
  }
});

// T·ªëi ∆∞u package.json n·∫øu c·∫ßn
const optimizePackageJson = () => {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  
  try {
    if (fs.existsSync(packageJsonPath)) {
      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
      
      // Th√™m script clean v√†o package.json n·∫øu ch∆∞a c√≥
      if (!packageJson.scripts.clean) {
        packageJson.scripts.clean = 'node scripts/clean-temp-files.js';
        console.log('‚úÖ ƒê√£ th√™m script clean v√†o package.json');
      }
      
      // S·∫Øp x·∫øp c√°c dependencies theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i
      if (packageJson.dependencies) {
        const sortedDependencies = {};
        Object.keys(packageJson.dependencies).sort().forEach(key => {
          sortedDependencies[key] = packageJson.dependencies[key];
        });
        packageJson.dependencies = sortedDependencies;
      }
      
      // S·∫Øp x·∫øp c√°c devDependencies theo th·ª© t·ª± b·∫£ng ch·ªØ c√°i
      if (packageJson.devDependencies) {
        const sortedDevDependencies = {};
        Object.keys(packageJson.devDependencies).sort().forEach(key => {
          sortedDevDependencies[key] = packageJson.devDependencies[key];
        });
        packageJson.devDependencies = sortedDevDependencies;
      }
      
      // Ghi l·∫°i file package.json
      fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2) + '\n');
      console.log('‚úÖ ƒê√£ t·ªëi ∆∞u file package.json');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t·ªëi ∆∞u package.json:', error.message);
  }
};

// Th·ª±c thi t·ªëi ∆∞u package.json
optimizePackageJson();

console.log('‚ú® Ho√†n th√†nh d·ªçn d·∫πp file t·∫°m!');
console.log('üí° M·∫πo: Ch·∫°y "npm run fix" tr∆∞·ªõc khi kh·ªüi ƒë·ªông d·ª± √°n ƒë·ªÉ s·ª≠a l·ªói Next.js'); 