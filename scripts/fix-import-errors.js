const fs = require('fs');
const path = require('path');

console.log('üîß S·ª≠a l·ªói import...');

// H√†m s·ª≠a l·ªói import trong file
function fixImportErrors(filePath) {
  try {
    if (!fs.existsSync(filePath)) {
      return false;
    }
    
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    
    // S·ª≠a l·ªói import b·ªã duplicate ho·∫∑c broken
    // Pattern: import {\nimport { ... } from '...';
    content = content.replace(/import\s*\{\s*\nimport\s*\{([^}]+)\}\s*from\s*['"]([^'"]+)['"];?\s*\n\s*([^}]*)\}\s*from\s*['"]([^'"]+)['"];?/g, 
      (match, p1, p2, p3, p4) => {
        if (p2 === p4) {
          // Same module, merge imports
          return `import { ${p1.trim()}, ${p3.trim()} } from '${p2}';`;
        } else {
          // Different modules, separate imports
          return `import { ${p1.trim()} } from '${p2}';\nimport { ${p3.trim()} } from '${p4}';`;
        }
      });
    
    // S·ª≠a l·ªói import statement b·ªã broken
    content = content.replace(/import\s*\{\s*\n\s*import\s*\{/g, 'import {');
    
    // S·ª≠a l·ªói comment trong import
    content = content.replace(/\/\/ (import\s*\{[^}]*\})\s*from\s*['"][^'"]+['"];?/g, '$1');
    
    // S·ª≠a l·ªói export b·ªã comment
    content = content.replace(/\/\/ (export\s*\{[^}]*\})\s*from\s*['"][^'"]+['"];?/g, '$1');
    
    // S·ª≠a l·ªói const b·ªã comment
    content = content.replace(/\/\/ (const\s+\w+\s*=)/g, '$1');
    
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ Fixed imports: ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.log(`‚ùå Error fixing ${filePath}: ${error.message}`);
    return false;
  }
}

// Danh s√°ch files c√≥ l·ªói
const problematicFiles = [
  'src/app/api/admin/users/route.ts',
  'src/app/api/cart/route.ts',
  'src/app/api/user/deposit/route.ts'
];

let fixedCount = 0;

// S·ª≠a t·ª´ng file
problematicFiles.forEach(file => {
  if (fixImportErrors(file)) {
    fixedCount++;
  }
});

console.log(`\n‚úÖ ƒê√£ s·ª≠a ${fixedCount} files c√≥ l·ªói import.`);

// Ki·ªÉm tra file check-bank-transfer c√≥ l·ªói ·ªü d√≤ng 136
const checkBankFile = 'src/app/api/payment/check-bank-transfer/route.ts';
if (fs.existsSync(checkBankFile)) {
  let content = fs.readFileSync(checkBankFile, 'utf8');
  const lines = content.split('\n');
  
  // T√¨m v√† s·ª≠a l·ªói ·ªü d√≤ng 136
  if (lines[135]) {
    console.log(`D√≤ng 136: ${lines[135]}`);
    
    // S·ª≠a l·ªói syntax
    if (lines[135].includes('// console.')) {
      lines[135] = lines[135].replace(/\/\/ console\.[^(]+\([^)]*\)[^;]*$/, '// console.log("Fixed");');
      
      const newContent = lines.join('\n');
      fs.writeFileSync(checkBankFile, newContent, 'utf8');
      console.log('‚úÖ Fixed line 136 in check-bank-transfer');
      fixedCount++;
    }
  }
}

console.log(`\nüéØ T·ªïng c·ªông ƒë√£ s·ª≠a ${fixedCount} files.`);
console.log('üöÄ Th·ª≠ ch·∫°y npm run lint l·∫°i...');
