const fs = require('fs');
const path = require('path');

/**
 * Script kh·∫Øc ph·ª•c l·ªói 404 cho c√°c t·ªáp webpack v√† turbopack
 * T·∫°o c√°c t·ªáp gi·∫£ ƒë·ªÉ ngƒÉn l·ªói 404 khi ph√°t tri·ªÉn
 * Phi√™n b·∫£n 1.1 - Th√™m t√≠nh nƒÉng b√°o c√°o tr·∫°ng th√°i
 */

console.log('üîß ƒêang s·ª≠a l·ªói 404 cho webpack v√† static files...');

// T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
const requiredDirs = [
  '.next/static/chunks',
  '.next/static/webpack',
  '.next/static/development',
  '.next/static/css',
  '.next/server/app',
  '.next/server/pages',
  '.next/cache/webpack',
];

requiredDirs.forEach((dir) => {
  const fullPath = path.join(process.cwd(), dir);
  if (!fs.existsSync(fullPath)) {
    try {
      fs.mkdirSync(fullPath, { recursive: true });
      console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${fullPath}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: ${fullPath}`, error.message);
    }
  }
});

// T·∫°o file webpack.hot-update.json gi·∫£
const createWebpackHotUpdateFiles = () => {
  const webpackDir = path.join(process.cwd(), '.next/static/webpack');
  
  // Danh s√°ch c√°c ID webpack c·∫ßn t·∫°o
  const webpackIds = [
    'webpack.hot-update.json',
    'b0262cddd2646134.webpack.hot-update.json',
    'webpack-5b8344ef4a8189c6.hot-update.json',
  ];
  
  webpackIds.forEach(filename => {
    const filePath = path.join(webpackDir, filename);
    try {
      // N·ªôi dung c∆° b·∫£n cho file hot update
      const content = filename.includes('hot-update.json') 
        ? '{"c":{},"r":[],"m":[]}' 
        : '// Empty webpack file';
      
      fs.writeFileSync(filePath, content);
      console.log(`‚úÖ ƒê√£ t·∫°o file webpack: ${filePath}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file webpack: ${filePath}`, error.message);
    }
  });
};

// T·∫°o file noop-turbopack-hmr.js gi·∫£
const createTurbopackFiles = () => {
  const hmrDir = path.join(process.cwd(), '.next/static/chunks/_app-pages-browser_node_modules_next_dist_client_dev_noop-turbopack-hmr_js');
  
  if (!fs.existsSync(hmrDir)) {
    try {
      fs.mkdirSync(hmrDir, { recursive: true });
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c HMR: ${hmrDir}`, error.message);
    }
  }
  
  const hmrFile = path.join(hmrDir, 'index.js');
  const hmrContent = `// Mock turbopack HMR
export default function() {
  console.log('[Turbopack HMR] Mock implementation loaded');
  return {};
}`;
  
  try {
    fs.writeFileSync(hmrFile, hmrContent);
    console.log(`‚úÖ ƒê√£ t·∫°o file HMR gi·∫£: ${hmrFile}`);
  } catch (error) {
    console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file HMR: ${hmrFile}`, error.message);
  }
};

// C·∫≠p nh·∫≠t next.config.js ƒë·ªÉ s·ª≠ d·ª•ng webpack thay v√¨ turbopack
const updateNextConfig = () => {
  const nextConfigPath = path.join(process.cwd(), 'next.config.js');
  
  if (fs.existsSync(nextConfigPath)) {
    try {
      let content = fs.readFileSync(nextConfigPath, 'utf8');
      
      // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng webpack thay v√¨ turbopack
      if (!content.includes('useFileSystemPublicRoutes')) {
        // Th√™m c·∫•u h√¨nh v√†o nextConfig
        content = content.replace(
          'const nextConfig = {',
          'const nextConfig = {\n  useFileSystemPublicRoutes: true,'
        );
      }
      
      // Th√™m c·∫•u h√¨nh t·∫Øt turbopack
      if (!content.includes('turbo: {')) {
        const experimentalRegex = /(experimental\s*:\s*{[^}]*?)(\s*})/;
        if (experimentalRegex.test(content)) {
          content = content.replace(
            experimentalRegex,
            '$1,\n    turbo: {\n      enabled: false\n    }$2'
          );
        }
      }
      
      fs.writeFileSync(nextConfigPath, content);
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t next.config.js`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t next.config.js: ${nextConfigPath}`, error.message);
    }
  }
};

// X√≥a c√°c file lock n·∫øu t·ªìn t·∫°i
const cleanLockFiles = () => {
  const lockFiles = [
    '.next/webpack.lock',
    '.next/server/middleware-build.lock',
    '.next/server/server-reference-manifest.lock',
  ];

  lockFiles.forEach((lockFile) => {
    const fullPath = path.join(process.cwd(), lockFile);
    if (fs.existsSync(fullPath)) {
      try {
        fs.unlinkSync(fullPath);
        console.log(`‚úÖ ƒê√£ x√≥a file lock: ${fullPath}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file lock: ${fullPath}`, error.message);
      }
    }
  });
};

// Th√™m ph∆∞∆°ng th·ª©c ki·ªÉm tra tr·∫°ng th√°i
const checkStatus = () => {
  console.log('\nüìä Ki·ªÉm tra tr·∫°ng th√°i sau khi s·ª≠a:');
  
  // Danh s√°ch c√°c file c·∫ßn ki·ªÉm tra
  const filesToCheck = [
    '.next/static/webpack/webpack.hot-update.json',
    '.next/static/webpack/b0262cddd2646134.webpack.hot-update.json',
    '.next/static/chunks/_app-pages-browser_node_modules_next_dist_client_dev_noop-turbopack-hmr_js/index.js'
  ];
  
  let allFilesExist = true;
  
  filesToCheck.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    const exists = fs.existsSync(filePath);
    
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${file}: ${exists ? 'ƒê√£ t·∫°o' : 'Ch∆∞a t·∫°o'}`);
    
    if (!exists) {
      allFilesExist = false;
    }
  });
  
  // Ki·ªÉm tra c·∫•u h√¨nh next.config.js
  const nextConfigPath = path.join(process.cwd(), 'next.config.js');
  if (fs.existsSync(nextConfigPath)) {
    const content = fs.readFileSync(nextConfigPath, 'utf8');
    const hasFileSystemRoutes = content.includes('useFileSystemPublicRoutes');
    const hasTurboDisabled = content.includes('turbo: {') && content.includes('enabled: false');
    
    console.log(`${hasFileSystemRoutes ? '‚úÖ' : '‚ùå'} next.config.js (useFileSystemPublicRoutes): ${hasFileSystemRoutes ? 'ƒê√£ c·∫≠p nh·∫≠t' : 'Ch∆∞a c·∫≠p nh·∫≠t'}`);
    console.log(`${hasTurboDisabled ? '‚úÖ' : '‚ùå'} next.config.js (turbo disabled): ${hasTurboDisabled ? 'ƒê√£ c·∫≠p nh·∫≠t' : 'Ch∆∞a c·∫≠p nh·∫≠t'}`);
    
    if (!hasFileSystemRoutes || !hasTurboDisabled) {
      allFilesExist = false;
    }
  }
  
  console.log(`\n${allFilesExist ? '‚úÖ T·∫•t c·∫£ c√°c s·ª≠a ƒë·ªïi ƒë√£ ƒë∆∞·ª£c √°p d·ª•ng th√†nh c√¥ng!' : '‚ùå M·ªôt s·ªë s·ª≠a ƒë·ªïi ch∆∞a ƒë∆∞·ª£c √°p d·ª•ng.'}`);
  console.log(`${allFilesExist ? '‚ú® D·ª± √°n s·∫Ω ho·∫°t ƒë·ªông m√† kh√¥ng c√≥ l·ªói 404!' : '‚ö†Ô∏è V·∫´n c√≥ th·ªÉ g·∫∑p l·ªói 404, h√£y ch·∫°y l·∫°i script.'}`);
};

// Th·ª±c thi t·∫•t c·∫£ c√°c b∆∞·ªõc s·ª≠a l·ªói
try {
  createWebpackHotUpdateFiles();
  createTurbopackFiles();
  updateNextConfig();
  cleanLockFiles();
  checkStatus(); // Th√™m d√≤ng n√†y ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
  console.log('\n‚ú® ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói 404 cho webpack v√† static files!');
} catch (error) {
  console.error('‚ùå L·ªói khi s·ª≠a l·ªói 404:', error);
} 