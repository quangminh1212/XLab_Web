const fs = require('fs');
const path = require('path');
const os = require('os');

/**
 * Script s·ª≠a l·ªói cho Next.js
 * X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn g·∫∑p ph·∫£i khi ph√°t tri·ªÉn Next.js
 * Phi√™n b·∫£n 2.0 - C·∫≠p nh·∫≠t v√† t·ªëi ∆∞u
 */

console.log('üîß ƒêang s·ª≠a l·ªói Next.js...');

// 1. T·∫°o th∆∞ m·ª•c cache v√† static n·∫øu ch∆∞a t·ªìn t·∫°i
const requiredDirs = [
  '.next/cache/webpack/client-development',
  '.next/cache/webpack/server-development',
  '.next/cache/webpack/edge-server-development',
  '.next/static/chunks',
  '.next/static/css',
  '.next/server/app',
  '.next/server/chunks',
  '.next/server/pages',
  '.next/trace',
];

requiredDirs.forEach((dir) => {
  const fullPath = path.join(process.cwd(), dir);
  if (!fs.existsSync(fullPath)) {
    try {
      fs.mkdirSync(fullPath, { recursive: true, mode: 0o777 });
      console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${fullPath}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: ${fullPath}`, error.message);
    }
  }
});

// 2. T·∫°o c√°c file .pack gi·∫£ ƒë·ªÉ tr√°nh l·ªói ENOENT
const createEmptyPackFiles = () => {
  const webpackDirs = [
    '.next/cache/webpack/client-development',
    '.next/cache/webpack/server-development',
    '.next/cache/webpack/edge-server-development',
  ];

  webpackDirs.forEach((dir) => {
    const fullPath = path.join(process.cwd(), dir);
    if (fs.existsSync(fullPath)) {
      for (let i = 0; i <= 5; i++) {
        const packFile = path.join(fullPath, `${i}.pack`);
        const packGzFile = path.join(fullPath, `${i}.pack.gz`);

        if (!fs.existsSync(packFile)) {
          try {
            fs.writeFileSync(packFile, '', { mode: 0o666 });
            console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packFile}`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file: ${packFile}`, error.message);
          }
        }

        if (!fs.existsSync(packGzFile)) {
          try {
            fs.writeFileSync(packGzFile, '', { mode: 0o666 });
            console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packGzFile}`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file: ${packGzFile}`, error.message);
          }
        }
      }
    }
  });
};

// 3. T·∫°o file CSS gi·∫£ ƒë·ªÉ tr√°nh l·ªói 404
const createPlaceholderFiles = () => {
  const cssDir = path.join(process.cwd(), '.next/static/css');
  const cssFile = path.join(cssDir, 'app-layout.css');

  if (!fs.existsSync(cssFile)) {
    try {
      fs.writeFileSync(cssFile, '/* Placeholder CSS */', { mode: 0o666 });
      console.log(`‚úÖ ƒê√£ t·∫°o file CSS gi·∫£: ${cssFile}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file CSS: ${cssFile}`, error.message);
    }
  }

  // T·∫°o file route.js gi·∫£ cho NextAuth
  const nextAuthDir = path.join(process.cwd(), '.next/server/app/api/auth/[...nextauth]');
  if (!fs.existsSync(nextAuthDir)) {
    try {
      fs.mkdirSync(nextAuthDir, { recursive: true, mode: 0o777 });
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c NextAuth: ${nextAuthDir}`, error.message);
    }
  }

  const routeFile = path.join(nextAuthDir, 'route.js');
  if (!fs.existsSync(routeFile)) {
    try {
      fs.writeFileSync(routeFile, '// Placeholder NextAuth route file', { mode: 0o666 });
      console.log(`‚úÖ ƒê√£ t·∫°o file route gi·∫£ cho NextAuth: ${routeFile}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file route NextAuth: ${routeFile}`, error.message);
    }
  }
};

// 4. Ki·ªÉm tra file .env v√† .env.local
const checkEnvFiles = () => {
  const envPath = path.join(process.cwd(), '.env');
  const envLocalPath = path.join(process.cwd(), '.env.local');

  if (!fs.existsSync(envPath)) {
    try {
      fs.writeFileSync(envPath, 'NODE_ENV=development\nNEXTAUTH_URL=http://localhost:3000\n', { mode: 0o600 });
      console.log(`‚úÖ ƒê√£ t·∫°o file .env`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file .env: ${envPath}`, error.message);
    }
  }

  if (!fs.existsSync(envLocalPath)) {
    try {
      fs.writeFileSync(
        envLocalPath,
        'NEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=voZ7iiSzvDrGjrG0m0qkkw60XkANsAg9xf/rGiA4bfA=\n',
        { mode: 0o600 }
      );
      console.log(`‚úÖ ƒê√£ t·∫°o file .env.local`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file .env.local: ${envLocalPath}`, error.message);
    }
  }
};

// 5. Ki·ªÉm tra quy·ªÅn th∆∞ m·ª•c .next
const checkNextPermissions = () => {
  const nextDir = path.join(process.cwd(), '.next');
  if (fs.existsSync(nextDir)) {
    try {
      const isWindows = os.platform() === 'win32';
      if (!isWindows) {
        // Ch·ªâ th·ª±c hi·ªán tr√™n Linux/macOS
        fs.chmodSync(nextDir, 0o777);
        fs.chmodSync(path.join(nextDir, 'trace'), 0o777);
      }
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t quy·ªÅn cho th∆∞ m·ª•c .next`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t quy·ªÅn cho th∆∞ m·ª•c .next: ${nextDir}`, error.message);
    }
  }
};

// 6. X√≥a c√°c file lock n·∫øu t·ªìn t·∫°i
const cleanLockFiles = () => {
  const lockFiles = [
    '.next/trace.lock',
    '.next/cache.lock',
    '.next/webpack.lock',
  ];

  lockFiles.forEach((lockFile) => {
    const fullPath = path.join(process.cwd(), lockFile);
    if (fs.existsSync(fullPath)) {
      try {
        fs.unlinkSync(fullPath);
        console.log(`‚úÖ ƒê√£ x√≥a file lock: ${fullPath}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file lock: ${fullPath}`, error.message);
      }
    }
  });
};

// 7. T·∫°o th∆∞ m·ª•c d·ªØ li·ªáu n·∫øu ch∆∞a t·ªìn t·∫°i
const ensureDataDirs = () => {
  const dataDirs = [
    'data',
    'data/backups',
    'public/images/products',
    'public/images/categories',
    'public/images/placeholder',
  ];

  dataDirs.forEach((dir) => {
    const fullPath = path.join(process.cwd(), dir);
    if (!fs.existsSync(fullPath)) {
      try {
        fs.mkdirSync(fullPath, { recursive: true });
        console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c d·ªØ li·ªáu: ${fullPath}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c d·ªØ li·ªáu: ${fullPath}`, error.message);
      }
    }
  });
  
  // T·∫°o file placeholder n·∫øu c·∫ßn
  const placeholderImg = path.join(process.cwd(), 'public/images/placeholder/product-placeholder.jpg');
  if (!fs.existsSync(placeholderImg)) {
    try {
      // N·∫øu kh√¥ng c√≥, t·∫°o file r·ªóng
      const sampleImg = path.join(process.cwd(), 'public/images/placeholder.jpg');
      if (fs.existsSync(sampleImg)) {
        fs.copyFileSync(sampleImg, placeholderImg);
      } else {
        fs.writeFileSync(placeholderImg, '');
      }
      console.log(`‚úÖ ƒê√£ t·∫°o file placeholder: ${placeholderImg}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o file placeholder: ${placeholderImg}`, error.message);
    }
  }
};

// Th·ª±c thi t·∫•t c·∫£ c√°c b∆∞·ªõc s·ª≠a l·ªói
try {
  createEmptyPackFiles();
  createPlaceholderFiles();
  checkEnvFiles();
  checkNextPermissions();
  cleanLockFiles();
  ensureDataDirs();
  console.log('‚ú® ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói Next.js!');
} catch (error) {
  console.error('‚ùå L·ªói khi s·ª≠a Next.js:', error);
}
