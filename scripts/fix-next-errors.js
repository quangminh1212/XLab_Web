const fs = require('fs');
const path = require('path');

/**
 * Script s·ª≠a l·ªói cho Next.js
 * X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn g·∫∑p ph·∫£i khi ph√°t tri·ªÉn Next.js
 */

console.log('üîß ƒêang s·ª≠a l·ªói Next.js...');

// 1. T·∫°o th∆∞ m·ª•c cache v√† static n·∫øu ch∆∞a t·ªìn t·∫°i
const requiredDirs = [
  '.next/cache/webpack/client-development',
  '.next/cache/webpack/server-development',
  '.next/cache/webpack/edge-server-development',
  '.next/static/chunks',
  '.next/static/css',
  '.next/server/app',
  '.next/server/chunks',
];

requiredDirs.forEach((dir) => {
  const fullPath = path.join(process.cwd(), dir);
  if (!fs.existsSync(fullPath)) {
    fs.mkdirSync(fullPath, { recursive: true });
    console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${fullPath}`);
  }
});

// 2. T·∫°o c√°c file .pack gi·∫£ ƒë·ªÉ tr√°nh l·ªói ENOENT
const createEmptyPackFiles = () => {
  const webpackDirs = [
    '.next/cache/webpack/client-development',
    '.next/cache/webpack/server-development',
    '.next/cache/webpack/edge-server-development',
  ];

  webpackDirs.forEach((dir) => {
    const fullPath = path.join(process.cwd(), dir);
    if (fs.existsSync(fullPath)) {
      for (let i = 0; i <= 5; i++) {
        const packFile = path.join(fullPath, `${i}.pack`);
        const packGzFile = path.join(fullPath, `${i}.pack.gz`);

        if (!fs.existsSync(packFile)) {
          fs.writeFileSync(packFile, '');
          console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packFile}`);
        }

        if (!fs.existsSync(packGzFile)) {
          fs.writeFileSync(packGzFile, '');
          console.log(`‚úÖ ƒê√£ t·∫°o file tr·ªëng: ${packGzFile}`);
        }
      }
    }
  });
};

// 3. T·∫°o file CSS gi·∫£ ƒë·ªÉ tr√°nh l·ªói 404
const createPlaceholderFiles = () => {
  const cssDir = path.join(process.cwd(), '.next/static/css');
  const cssFile = path.join(cssDir, 'app-layout.css');

  if (!fs.existsSync(cssFile)) {
    fs.writeFileSync(cssFile, '/* Placeholder CSS */');
    console.log(`‚úÖ ƒê√£ t·∫°o file CSS gi·∫£: ${cssFile}`);
  }

  // T·∫°o file route.js gi·∫£ cho NextAuth
  const nextAuthDir = path.join(process.cwd(), '.next/server/app/api/auth/[...nextauth]');
  if (!fs.existsSync(nextAuthDir)) {
    fs.mkdirSync(nextAuthDir, { recursive: true });
  }

  const routeFile = path.join(nextAuthDir, 'route.js');
  if (!fs.existsSync(routeFile)) {
    fs.writeFileSync(routeFile, '// Placeholder NextAuth route file');
    console.log(`‚úÖ ƒê√£ t·∫°o file route gi·∫£ cho NextAuth: ${routeFile}`);
  }
};

// 4. Ki·ªÉm tra file .env v√† .env.local
const checkEnvFiles = () => {
  const envPath = path.join(process.cwd(), '.env');
  const envLocalPath = path.join(process.cwd(), '.env.local');

  if (!fs.existsSync(envPath)) {
    fs.writeFileSync(envPath, 'NODE_ENV=development\nNEXTAUTH_URL=http://localhost:3000\n');
    console.log(`‚úÖ ƒê√£ t·∫°o file .env`);
  }

  if (!fs.existsSync(envLocalPath)) {
    fs.writeFileSync(
      envLocalPath,
      'NEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=voZ7iiSzvDrGjrG0m0qkkw60XkANsAg9xf/rGiA4bfA=\n',
    );
    console.log(`‚úÖ ƒê√£ t·∫°o file .env.local`);
  }
};

// Th·ª±c thi t·∫•t c·∫£ c√°c b∆∞·ªõc s·ª≠a l·ªói
try {
  createEmptyPackFiles();
  createPlaceholderFiles();
  checkEnvFiles();
  console.log('‚ú® ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói Next.js!');
} catch (error) {
  console.error('‚ùå L·ªói khi s·ª≠a Next.js:', error);
}
