const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=== B·∫Øt ƒë·∫ßu s·ª≠a l·ªói SWC ===');

// Ki·ªÉm tra phi√™n b·∫£n Node.js
console.log('Phi√™n b·∫£n Node.js:', process.version);

// Ki·ªÉm tra phi√™n b·∫£n Next.js
try {
  const nextPkg = require('./node_modules/next/package.json');
  console.log('Phi√™n b·∫£n Next.js:', nextPkg.version);
} catch (err) {
  console.error('Kh√¥ng th·ªÉ ƒë·ªçc phi√™n b·∫£n Next.js:', err.message);
}

// ƒê∆∞·ªùng d·∫´n t·ªõi file SWC native
const swcPath = path.join(__dirname, 'node_modules', '@next', 'swc-win32-x64-msvc');
const swcNodePath = path.join(swcPath, 'next-swc.win32-x64-msvc.node');

// X√≥a module SWC hi·ªán t·∫°i
console.log('ƒêang x√≥a module SWC hi·ªán t·∫°i...');
try {
  if (fs.existsSync(swcPath)) {
    fs.rmSync(swcPath, { recursive: true, force: true });
    console.log('‚úÖ ƒê√£ x√≥a module SWC hi·ªán t·∫°i');
  } else {
    console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y module SWC');
  }
} catch (err) {
  console.error('‚ùå L·ªói khi x√≥a module SWC:', err.message);
}

// C√†i ƒë·∫∑t l·∫°i module SWC
console.log('ƒêang c√†i ƒë·∫∑t l·∫°i module SWC...');
try {
  execSync('npm i -D @next/swc-win32-x64-msvc@latest', { stdio: 'inherit' });
  console.log('‚úÖ ƒê√£ c√†i ƒë·∫∑t l·∫°i module SWC');
} catch (err) {
  console.error('‚ùå L·ªói khi c√†i ƒë·∫∑t l·∫°i module SWC:', err.message);
}

// Ki·ªÉm tra xem file SWC ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t hay ch∆∞a
console.log('Ki·ªÉm tra file SWC...');
if (fs.existsSync(swcNodePath)) {
  const stats = fs.statSync(swcNodePath);
  const fileSizeInKB = Math.round(stats.size / 1024);
  console.log('‚úÖ File SWC ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng');
  console.log(`K√≠ch th∆∞·ªõc file: ${fileSizeInKB} KB`);
  console.log(`Ng√†y t·∫°o file: ${stats.birthtime}`);
  console.log(`Ng√†y s·ª≠a ƒë·ªïi cu·ªëi: ${stats.mtime}`);
} else {
  console.error('‚ùå File SWC kh√¥ng t·ªìn t·∫°i sau khi c√†i ƒë·∫∑t');
}

// C·∫≠p nh·∫≠t c·∫•u h√¨nh Next.js
console.log('ƒêang c·∫≠p nh·∫≠t c·∫•u h√¨nh Next.js...');
try {
  const nextConfigPath = path.join(__dirname, 'next.config.js');
  let nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  
  // X√≥a swcMinify n·∫øu t·ªìn t·∫°i
  nextConfig = nextConfig.replace(/,\s*swcMinify:\s*false/g, '');
  
  // C·∫≠p nh·∫≠t c·∫•u h√¨nh compiler
  nextConfig = nextConfig.replace(
    /compiler:\s*{[^}]*}/g,
    `compiler: {
    styledComponents: true
  }`
  );
  
  // C·∫≠p nh·∫≠t c·∫•u h√¨nh experimental
  nextConfig = nextConfig.replace(
    /experimental:\s*{[^}]*}/g,
    `experimental: {
    largePageDataBytes: 12800000,
    forceSwcTransforms: false,
    appDocumentPreloading: false,
    disableOptimizedLoading: true,
    disablePostcssPresetEnv: true
  }`
  );
  
  fs.writeFileSync(nextConfigPath, nextConfig);
  console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh Next.js');
} catch (err) {
  console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c·∫•u h√¨nh Next.js:', err.message);
}

// T·∫°o file .swcrc
console.log('ƒêang t·∫°o file .swcrc...');
try {
  const swcrcPath = path.join(__dirname, '.swcrc');
  const swcrcContent = JSON.stringify({
    jsc: {
      parser: {
        syntax: "ecmascript",
        jsx: true,
        dynamicImport: true,
        privateMethod: true,
        functionBind: true,
        exportDefaultFrom: true,
        exportNamespaceFrom: true,
        decorators: true,
        decoratorsBeforeExport: true,
        topLevelAwait: true,
        importMeta: true
      },
      transform: {
        react: {
          runtime: "automatic",
          pragma: "React.createElement",
          pragmaFrag: "React.Fragment",
          throwIfNamespace: true,
          development: false,
          useBuiltins: false
        }
      },
      target: "es2021",
      loose: false,
      externalHelpers: false,
      keepClassNames: true
    },
    minify: false,
    isModule: true
  }, null, 2);
  
  fs.writeFileSync(swcrcPath, swcrcContent);
  console.log('‚úÖ ƒê√£ t·∫°o file .swcrc');
} catch (err) {
  console.error('‚ùå L·ªói khi t·∫°o file .swcrc:', err.message);
}

console.log('=== Ho√†n t·∫•t s·ª≠a l·ªói SWC ===');
console.log('üöÄ B·∫°n c√≥ th·ªÉ ch·∫°y "npm run dev" ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£'); 