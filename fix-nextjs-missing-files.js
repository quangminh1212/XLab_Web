/**
 * Fix c√°c l·ªói ENOENT trong Next.js
 * - T·∫°o c√°c file cache thi·∫øu
 * - T·∫°o c√°c file manifest thi·∫øu
 * - S·ª≠a c√°c ƒë∆∞·ªùng d·∫´n kh√¥ng ƒë√∫ng
 */

const fs = require('fs');
const path = require('path');
const zlib = require('zlib');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
function ensureDirectoryExists(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
      console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${path.resolve(dirPath)}`);
    }
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c ${dirPath}:`, error.message);
    return false;
  }
}

// T·∫°o file v·ªõi n·ªôi dung
function createFile(filePath, content) {
  try {
    const dir = path.dirname(filePath);
    ensureDirectoryExists(dir);
    
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ ƒê√£ t·∫°o file: ${filePath}`);
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o file ${filePath}:`, error.message);
    return false;
  }
}

try {
  console.log('üîß ƒêang s·ª≠a l·ªói Next.js...');
  
  // T·∫°o th∆∞ m·ª•c .next v√† c√°c th∆∞ m·ª•c con n·∫øu ch∆∞a t·ªìn t·∫°i
  ensureDirectoryExists('.next/cache/webpack/client-development');
  ensureDirectoryExists('.next/cache/webpack/server-development');
  ensureDirectoryExists('.next/cache/webpack/edge-server-development');
  ensureDirectoryExists('.next/server/chunks');
  ensureDirectoryExists('.next/static/chunks');
  ensureDirectoryExists('.next/static/chunks/app');
  ensureDirectoryExists('.next/static/webpack');
  ensureDirectoryExists('.next/static/css');
  ensureDirectoryExists('.next/static/css/app');
  
  // T·∫°o file font manifest
  const fontManifestContent = JSON.stringify({
    pages: {},
    app: {},
    version: 1
  }, null, 2);
  
  createFile('.next/server/next-font-manifest.json', fontManifestContent);
  
  // T·∫°o c√°c file tƒ©nh
  const placeholderContent = '// Generated placeholder file';
  
  // App chunks
  const jsFiles = [
    '.next/static/chunks/app-pages-internals.js',
    '.next/static/chunks/main-app.js',
    '.next/static/chunks/app/not-found.js',
    '.next/static/chunks/app/page.js',
    '.next/static/chunks/app/loading.js'
  ];
  
  for (const file of jsFiles) {
    createFile(file, placeholderContent);
  }
  
  // T·∫°o file route gi·∫£ cho NextAuth
  createFile('.next/server/app/api/auth/[...nextauth]/route.js', placeholderContent);
  
  // T·∫°o th√™m c√°c file manifest thi·∫øu
  const appPathsManifest = JSON.stringify({}, null, 2);
  createFile('.next/server/app-paths-manifest.json', appPathsManifest);
  
  const middlewareManifest = JSON.stringify({
    sortedMiddleware: [],
    middleware: {},
    version: 2
  }, null, 2);
  createFile('.next/server/middleware-manifest.json', middlewareManifest);
  
  const buildManifest = JSON.stringify({
    polyfillFiles: [],
    devFiles: [],
    ampDevFiles: [],
    lowPriorityFiles: [],
    rootMainFiles: [],
    pages: {
      "/_app": []
    },
    ampFirstPages: []
  }, null, 2);
  createFile('.next/build-manifest.json', buildManifest);
  
  console.log('‚ú® ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói Next.js!');
} catch (error) {
  console.error('‚ùå L·ªói nghi√™m tr·ªçng:', error);
} 