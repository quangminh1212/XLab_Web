/**
 * XLAB WEB UTILITY TOOLKIT
 * C√¥ng c·ª• t√≠ch h·ª£p ƒë·ªÉ s·ª≠a l·ªói, b·∫£o tr√¨ v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng cho d·ª± √°n XLab Web
 * 
 * Script n√†y t√≠ch h·ª£p ch·ª©c nƒÉng c·ªßa c√°c file:
 * - fix-products-json.js - S·ª≠a l·ªói c√∫ ph√°p JSON v√† c·∫≠p nh·∫≠t ID s·∫£n ph·∫©m
 * - fix-trace-error.js - S·ª≠a l·ªói file trace
 * - fix-chunks-final.js - S·ª≠a l·ªói chunks
 * - fix-next-chunks.js - S·ª≠a l·ªói next chunks
 * - utils/update-product-ids.js - C·∫≠p nh·∫≠t ID s·∫£n ph·∫©m
 * 
 * S·ª≠ d·ª•ng: node xlab-utils.js [command]
 * Commands:
 *   - fix-all: Ch·∫°y t·∫•t c·∫£ c√°c c√¥ng c·ª• s·ª≠a l·ªói
 *   - fix-products: S·ª≠a l·ªói JSON s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t ID
 *   - fix-trace: S·ª≠a l·ªói trace
 *   - fix-chunks: S·ª≠a l·ªói chunks
 *   - update-ids: C·∫≠p nh·∫≠t ID s·∫£n ph·∫©m
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Thi·∫øt l·∫≠p logging
const LOG_FILE = 'xlab-utils.log';
let isVerbose = process.argv.includes('--verbose');

function log(message, isError = false) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}`;
  
  try {
    fs.appendFileSync(LOG_FILE, logMessage + '\n');
  } catch (error) {
    // Ignore error
  }
  
  if (isError) {
    console.error(message);
  } else {
    console.log(message);
  }
}

function logVerbose(message) {
  if (isVerbose) {
    log(message);
  }
}

// C√°c h√†m ti·ªán √≠ch
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    try {
      fs.mkdirSync(dirPath, { recursive: true });
      logVerbose(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${dirPath}`);
      return true;
    } catch (error) {
      log(`‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ${dirPath}: ${error.message}`, true);
      return false;
    }
  }
  return true;
}

function createFileWithContent(filePath, content) {
  try {
    const dirPath = path.dirname(filePath);
    ensureDirectoryExists(dirPath);
    
    fs.writeFileSync(filePath, content);
    logVerbose(`‚úÖ ƒê√£ t·∫°o file: ${filePath}`);
    return true;
  } catch (error) {
    log(`‚ùå Kh√¥ng th·ªÉ t·∫°o file ${filePath}: ${error.message}`, true);
    return false;
  }
}

function deleteFileIfExists(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      logVerbose(`‚úÖ ƒê√£ x√≥a file: ${filePath}`);
      return true;
    }
  } catch (error) {
    log(`‚ùå Kh√¥ng th·ªÉ x√≥a file ${filePath}: ${error.message}`, true);
  }
  return false;
}

// 1. S·ª≠a l·ªói JSON s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t ID
function fixProductsJson() {
  log('üîß B·∫Øt ƒë·∫ßu s·ª≠a l·ªói file products.json...');
  
  // H√†m t·∫°o ID t·ª´ t√™n s·∫£n ph·∫©m
  function generateIdFromName(name) {
    return name
      .toLowerCase()
      .trim()
      .replace(/[^\w\s-]/g, '')  // Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát
      .replace(/[\s_-]+/g, '-')   // Thay th·∫ø kho·∫£ng tr·∫Øng b·∫±ng g·∫°ch ngang
      .replace(/^-+|-+$/g, '');   // Lo·∫°i b·ªè g·∫°ch ngang ·ªü ƒë·∫ßu/cu·ªëi
  }
  
  // ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON s·∫£n ph·∫©m
  const filePath = path.join(process.cwd(), 'src', 'data', 'products.json');
  const dataDir = path.dirname(filePath);
  
  // ƒê·∫£m b·∫£o th∆∞ m·ª•c t·ªìn t·∫°i
  if (!ensureDirectoryExists(dataDir)) {
    log('‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c data, ƒëang b·ªè qua...', true);
    return false;
  }
  
  // Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
  if (!fs.existsSync(filePath)) {
    log(`‚ÑπÔ∏è File ${filePath} kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o file m·ªõi...`);
    createFileWithContent(filePath, '[]');
    log('‚úÖ ƒê√£ t·∫°o file products.json tr·ªëng');
    return true;
  }
  
  try {
    // ƒê·ªçc file d∆∞·ªõi d·∫°ng vƒÉn b·∫£n ƒë·ªÉ ki·ªÉm tra l·ªói c√∫ ph√°p
    const rawData = fs.readFileSync(filePath, 'utf8');
    log(`üìÇ ƒê√£ ƒë·ªçc file products.json, dung l∆∞·ª£ng: ${rawData.length} bytes`);
    
    // Ki·ªÉm tra v√† s·ª≠a l·ªói c√∫ ph√°p JSON
    let fixedData = rawData;
    let jsonFixed = false;
    
    try {
      // Th·ª≠ ph√¢n t√≠ch JSON
      JSON.parse(rawData);
      log('‚úÖ Kh√¥ng ph√°t hi·ªán l·ªói c√∫ ph√°p JSON');
    } catch (parseError) {
      log(`‚ö†Ô∏è Ph√°t hi·ªán l·ªói c√∫ ph√°p JSON: ${parseError.message}`, true);
      
      // L·∫•y v·ªã tr√≠ l·ªói
      const errorPosition = parseError.message.match(/position (\d+)/);
      if (errorPosition && errorPosition[1]) {
        const pos = parseInt(errorPosition[1]);
        const context = rawData.substring(Math.max(0, pos - 30), pos + 30);
        log(`üîç Ng·ªØ c·∫£nh l·ªói: ${context}`, true);
        
        // S·ª≠a c√°c l·ªói c√∫ ph√°p JSON ph·ªï bi·∫øn
        fixedData = rawData
          .replace(/}\s*"/g, '},"')  // Thi·∫øu d·∫•u ph·∫©y gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng
          .replace(/,\s*}/g, '}')     // D·∫•u ph·∫©y th·ª´a tr∆∞·ªõc d·∫•u ƒë√≥ng ngo·∫∑c
          .replace(/,\s*]/g, ']');    // D·∫•u ph·∫©y th·ª´a tr∆∞·ªõc d·∫•u ƒë√≥ng m·∫£ng
        
        try {
          // Ki·ªÉm tra xem s·ª≠a l·ªói c√≥ th√†nh c√¥ng kh√¥ng
          JSON.parse(fixedData);
          log('‚úÖ ƒê√£ s·ª≠a l·ªói c√∫ ph√°p JSON th√†nh c√¥ng');
          jsonFixed = true;
        } catch (newError) {
          log(`‚ùå Kh√¥ng th·ªÉ s·ª≠a l·ªói c√∫ ph√°p t·ª± ƒë·ªông: ${newError.message}`, true);
          return false;
        }
      }
    }
    
    // Ph√¢n t√≠ch d·ªØ li·ªáu s·∫£n ph·∫©m
    const products = JSON.parse(jsonFixed ? fixedData : rawData);
    log(`üìä ƒê√£ t·∫£i ${products.length} s·∫£n ph·∫©m`);
    
    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t ID s·∫£n ph·∫©m
    const updatedProducts = [];
    const idChanges = [];
    const newIds = new Map();
    
    for (const product of products) {
      if (!product) continue;
      
      const oldId = product.id;
      const baseNewId = generateIdFromName(product.name || 'unknown-product');
      
      // X·ª≠ l√Ω tr√πng l·∫∑p ID
      let newId = baseNewId;
      let counter = 1;
      
      while (newIds.has(newId)) {
        newId = `${baseNewId}-${counter}`;
        counter++;
      }
      
      // L∆∞u tr·ªØ ID m·ªõi
      newIds.set(newId, true);
      
      // Theo d√µi c√°c thay ƒë·ªïi ID
      if (oldId !== newId) {
        idChanges.push({ name: product.name, oldId, newId });
        product.id = newId;
      }
      
      updatedProducts.push(product);
    }
    
    // B√°o c√°o c√°c thay ƒë·ªïi
    if (idChanges.length > 0) {
      log(`üìù ƒê√£ thay ƒë·ªïi ${idChanges.length} ID s·∫£n ph·∫©m:`);
      for (const change of idChanges) {
        log(`  - "${change.name}": ${change.oldId || 'undefined'} -> ${change.newId}`);
      }
    } else {
      log('‚úÖ T·∫•t c·∫£ ID s·∫£n ph·∫©m ƒë√£ ·ªü ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }
    
    // L∆∞u l·∫°i d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
    if (jsonFixed || idChanges.length > 0) {
      fs.writeFileSync(filePath, JSON.stringify(updatedProducts, null, 2), 'utf8');
      log('‚úÖ ƒê√£ l∆∞u file products.json v·ªõi c√°c ID ƒë√£ c·∫≠p nh·∫≠t');
    }
    
    return true;
  } catch (error) {
    log(`‚ùå L·ªói x·ª≠ l√Ω file products.json: ${error.message}`, true);
    return false;
  }
}

// 2. S·ª≠a l·ªói file trace
function fixTraceError() {
  log('üîß B·∫Øt ƒë·∫ßu s·ª≠a l·ªói trace v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng Next.js...');
  
  // ƒê∆∞·ªùng d·∫´n c√°c th∆∞ m·ª•c quan tr·ªçng
  const rootDir = process.cwd();
  const nextDir = path.join(rootDir, '.next');
  const serverDir = path.join(nextDir, 'server');
  const staticDir = path.join(nextDir, 'static');
  
  // X·ª≠ l√Ω file trace
  log('üîç X·ª≠ l√Ω file trace...');
  const tracePath = path.join(nextDir, 'trace');
  
  // T·∫°o th∆∞ m·ª•c .next n·∫øu kh√¥ng t·ªìn t·∫°i
  ensureDirectoryExists(nextDir);
  
  // X√≥a file trace n·∫øu t·ªìn t·∫°i
  deleteFileIfExists(tracePath);
  
  // T·∫°o file .traceignore
  const traceIgnorePath = path.join(rootDir, '.traceignore');
  const traceIgnoreContent = `
# Ignore all files in node_modules
**/node_modules/**
# Ignore all files in .next
**/.next/**
# Ignore all dot files
**/.*
  `.trim();
  
  createFileWithContent(traceIgnorePath, traceIgnoreContent);
  log('‚úÖ ƒê√£ ho√†n t·∫•t x·ª≠ l√Ω file trace');
  
  // T·∫°o middleware-manifest.json
  log('üìÑ T·∫°o middleware-manifest.json...');
  
  ensureDirectoryExists(serverDir);
  
  const manifestPath = path.join(serverDir, 'middleware-manifest.json');
  const manifestContent = JSON.stringify({
    middleware: {
      "/": {
        env: [],
        files: [],
        name: "default",
        page: "/",
        regexp: "^/(?!_next|api).*$"
      }
    },
    functions: {},
    version: 2
  }, null, 2);
  
  // X√≥a file c≈© n·∫øu t·ªìn t·∫°i
  deleteFileIfExists(manifestPath);
  
  // T·∫°o file m·ªõi
  createFileWithContent(manifestPath, manifestContent);
  log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o middleware-manifest.json');
  
  // T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
  log('üìÅ T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt...');
  
  // Th∆∞ m·ª•c server v√† c√°c th∆∞ m·ª•c con
  const requiredDirs = [
    path.join(serverDir, 'app'),
    path.join(serverDir, 'pages'),
    path.join(serverDir, 'chunks'),
    path.join(serverDir, 'vendor-chunks'),
    path.join(staticDir, 'chunks'),
    path.join(staticDir, 'chunks', 'app'),
    path.join(staticDir, 'chunks', 'app', 'products'),
    path.join(staticDir, 'chunks', 'app', 'products', '[id]')
  ];
  
  let allDirsCreated = true;
  for (const dir of requiredDirs) {
    if (!ensureDirectoryExists(dir)) {
      allDirsCreated = false;
    }
  }
  
  if (allDirsCreated) {
    log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt');
  } else {
    log('‚ö†Ô∏è M·ªôt s·ªë th∆∞ m·ª•c kh√¥ng th·ªÉ t·∫°o', true);
  }
  
  // T·∫°o c√°c file c·∫ßn thi·∫øt
  log('üìù T·∫°o c√°c file c·∫ßn thi·∫øt...');
  
  // T·∫°o app-paths-manifest.json
  const appPathsManifestPath = path.join(serverDir, 'app-paths-manifest.json');
  const appPathsManifestContent = JSON.stringify({
    "/": "app/page.js",
    "/products": "app/products/page.js",
    "/products/[id]": "app/products/[id]/page.js"
  }, null, 2);
  createFileWithContent(appPathsManifestPath, appPathsManifestContent);
  
  // T·∫°o build-manifest.json
  const buildManifestPath = path.join(nextDir, 'build-manifest.json');
  const buildManifestContent = JSON.stringify({
    polyfillFiles: [],
    devFiles: [],
    ampDevFiles: [],
    lowPriorityFiles: [],
    rootMainFiles: ["static/chunks/main-app.js"],
    pages: {},
    ampFirstPages: []
  }, null, 2);
  createFileWithContent(buildManifestPath, buildManifestContent);
  
  // T·∫°o main-app.js
  const mainAppPath = path.join(staticDir, 'chunks', 'main-app.js');
  const mainAppContent = `// Main App Chunk
console.log("Main app chunk loaded successfully");`;
  createFileWithContent(mainAppPath, mainAppContent);
  
  log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o c√°c file c·∫ßn thi·∫øt');
  
  // S·ª≠a l·ªói ChunkLoadError cho trang products/[id]
  log('üöÄ S·ª≠a l·ªói ChunkLoadError cho trang products/[id]...');
  
  // ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
  const productChunksDir = path.join(staticDir, 'chunks', 'app', 'products', '[id]');
  ensureDirectoryExists(productChunksDir);
  
  // C√°c file c·∫ßn t·∫°o
  const productChunkFiles = [
    { 
      name: 'page.js',
      content: `// Page Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8857],{60767:function(){console.log("Product page chunk loaded")}}]);`
    },
    { 
      name: 'loading.js',
      content: `// Loading Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9821],{43822:function(){console.log("Product loading chunk loaded")}}]);`
    },
    { 
      name: 'not-found.js',
      content: `// Not Found Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5613],{29484:function(){console.log("Product not-found chunk loaded")}}]);`
    },
    // Th√™m c√°c file c√≥ hashed filename
    { 
      name: 'page-196d5685cfc.js',
      content: `// Hashed Page Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8857],{60767:function(){console.log("Product page chunk loaded")}}]);`
    },
    { 
      name: 'loading-196d5685cfc.js',
      content: `// Hashed Loading Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9821],{43822:function(){console.log("Product loading chunk loaded")}}]);`
    },
    { 
      name: 'not-found-196d5685cfc.js',
      content: `// Hashed Not Found Chunk for products/[id]\n(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5613],{29484:function(){console.log("Product not-found chunk loaded")}}]);`
    }
  ];
  
  // T·∫°o c√°c file
  for (const file of productChunkFiles) {
    createFileWithContent(path.join(productChunksDir, file.name), file.content);
  }
  
  log('‚úÖ ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói ChunkLoadError cho trang s·∫£n ph·∫©m chi ti·∫øt');
  return true;
}

// 3. C·∫≠p nh·∫≠t danh s√°ch file trong .gitignore
function updateGitignore() {
  log('üìù ƒêang c·∫≠p nh·∫≠t file .gitignore...');
  
  const gitignorePath = path.join(process.cwd(), '.gitignore');
  let gitignoreContent = '';
  
  // ƒê·ªçc n·ªôi dung hi·ªán t·∫°i n·∫øu file t·ªìn t·∫°i
  if (fs.existsSync(gitignorePath)) {
    gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
  }
  
  // Danh s√°ch c√°c m·ª•c c·∫ßn th√™m v√†o .gitignore
  const entriesToAdd = [
    '# Next.js generated files',
    '.next/static/chunks/app/products/[id]/',
    '.next/server/middleware-manifest.json',
    '.next/trace',
    '.traceignore',
    'next-fix-all.log',
    'xlab-utils.log',
    '*.log'
  ];
  
  // Ki·ªÉm tra v√† th√™m c√°c m·ª•c c√≤n thi·∫øu
  let contentChanged = false;
  for (const entry of entriesToAdd) {
    if (!gitignoreContent.includes(entry)) {
      gitignoreContent += `\n${entry}`;
      contentChanged = true;
    }
  }
  
  // L∆∞u l·∫°i n·∫øu c√≥ thay ƒë·ªïi
  if (contentChanged) {
    fs.writeFileSync(gitignorePath, gitignoreContent.trim() + '\n');
    log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file .gitignore');
  } else {
    log('‚úÖ File .gitignore ƒë√£ c√≥ ƒë·∫ßy ƒë·ªß c√°c m·ª•c c·∫ßn thi·∫øt');
  }
  
  return true;
}

// 4. D·ªçn d·∫πp c√°c file th·ª´a
function cleanupRedundantFiles() {
  log('üßπ D·ªçn d·∫πp c√°c file th·ª´a...');
  
  const filesToRemove = [
    'fix-products-json.js',
    'fix-trace-error.js',
    'fix-chunks-final.js',
    'fix-next-chunks.js',
    'next-fix-all.js'
  ];
  
  let removed = 0;
  for (const file of filesToRemove) {
    const filePath = path.join(process.cwd(), file);
    if (deleteFileIfExists(filePath)) {
      removed++;
    }
  }
  
  if (removed > 0) {
    log(`‚úÖ ƒê√£ x√≥a ${removed}/${filesToRemove.length} file th·ª´a`);
  } else {
    log('‚úÖ Kh√¥ng c√≥ file th·ª´a c·∫ßn x√≥a');
  }
  
  return true;
}

// H√†m ch·∫°y t·∫•t c·∫£ c√°c s·ª≠a l·ªói
function fixAll() {
  log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh s·ª≠a l·ªói to√†n di·ªán...');
  
  const results = {
    products: fixProductsJson(),
    trace: fixTraceError(),
    gitignore: updateGitignore()
  };
  
  const success = Object.values(results).every(result => result === true);
  
  if (success) {
    log('‚úÖ ƒê√£ ho√†n t·∫•t qu√° tr√¨nh s·ª≠a l·ªói');
    return true;
  } else {
    log('‚ö†Ô∏è Qu√° tr√¨nh s·ª≠a l·ªói ho√†n t·∫•t v·ªõi m·ªôt s·ªë c·∫£nh b√°o');
    return false;
  }
}

// X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
function parseCommandLineArgs() {
  const args = process.argv.slice(2);
  const command = args[0] || 'fix-all';
  
  switch (command) {
    case 'fix-all':
      fixAll();
      break;
    case 'fix-products':
      fixProductsJson();
      break;
    case 'fix-trace':
      fixTraceError();
      break;
    case 'update-gitignore':
      updateGitignore();
      break;
    case 'cleanup':
      cleanupRedundantFiles();
      break;
    case 'help':
      showHelp();
      break;
    default:
      console.log(`L·ªánh kh√¥ng h·ª£p l·ªá: ${command}`);
      showHelp();
      break;
  }
}

// Hi·ªÉn th·ªã tr·ª£ gi√∫p
function showHelp() {
  console.log(`
XLab Web Utility Toolkit

S·ª≠ d·ª•ng: node xlab-utils.js [command] [options]

Commands:
  fix-all          Ch·∫°y t·∫•t c·∫£ c√°c c√¥ng c·ª• s·ª≠a l·ªói
  fix-products     S·ª≠a l·ªói JSON s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t ID
  fix-trace        S·ª≠a l·ªói trace
  update-gitignore C·∫≠p nh·∫≠t file .gitignore
  cleanup          D·ªçn d·∫πp c√°c file th·ª´a
  help             Hi·ªÉn th·ªã tr·ª£ gi√∫p

Options:
  --verbose        Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
`);
}

// Ch·∫°y script
try {
  log('=== B·∫Øt ƒë·∫ßu c√¥ng c·ª• XLab Web Utility Toolkit ===');
  parseCommandLineArgs();
} catch (error) {
  log(`‚ùå L·ªói kh√¥ng mong mu·ªën: ${error.message}`, true);
  process.exit(1);
} 