/**
 * Script ƒë·ªÉ s·ª≠a l·ªói SWC (Rust Compiler) trong Next.js
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=== B·∫Øt ƒë·∫ßu s·ª≠a l·ªói SWC cho Next.js ===');

// Ki·ªÉm tra xem c√≥ th∆∞ m·ª•c SWC kh√¥ng
const swcDir = path.join(__dirname, 'node_modules', '@next', 'swc-win32-x64-msvc');
if (fs.existsSync(swcDir)) {
  console.log(`üîç ƒê√£ t√¨m th·∫•y th∆∞ m·ª•c SWC t·∫°i: ${swcDir}`);
  
  // Ki·ªÉm tra t·ªáp binary
  const swcBinary = path.join(swcDir, 'next-swc.win32-x64-msvc.node');
  if (fs.existsSync(swcBinary)) {
    console.log(`üìÑ T√¨m th·∫•y t·ªáp binary SWC: ${swcBinary}`);
    console.log('üîÑ Sao l∆∞u t·ªáp binary SWC hi·ªán t·∫°i...');
    
    try {
      fs.renameSync(swcBinary, `${swcBinary}.backup`);
      console.log(`‚úÖ ƒê√£ sao l∆∞u t·ªáp binary SWC th√†nh: ${swcBinary}.backup`);
    } catch (error) {
      console.error(`‚ùå Kh√¥ng th·ªÉ sao l∆∞u t·ªáp binary SWC: ${error.message}`);
    }
  } else {
    console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t·ªáp binary SWC t·∫°i: ${swcBinary}`);
  }
  
  // C√†i ƒë·∫∑t phi√™n b·∫£n WASM c·ªßa SWC
  console.log('üì¶ C√†i ƒë·∫∑t @next/swc-wasm-nodejs...');
  try {
    execSync('npm i @next/swc-wasm-nodejs --no-save', { stdio: 'inherit' });
    console.log('‚úÖ ƒê√£ c√†i ƒë·∫∑t @next/swc-wasm-nodejs th√†nh c√¥ng');
    
    // C·∫≠p nh·∫≠t .npmrc ƒë·ªÉ s·ª≠ d·ª•ng WASM
    const npmrcPath = path.join(__dirname, '.npmrc');
    let npmrcContent = '';
    
    if (fs.existsSync(npmrcPath)) {
      npmrcContent = fs.readFileSync(npmrcPath, 'utf8');
      if (!npmrcContent.includes('next-swc-wasm=true')) {
        npmrcContent += '\nnext-swc-wasm=true\n';
      }
    } else {
      npmrcContent = 'next-swc-wasm=true\n';
    }
    
    fs.writeFileSync(npmrcPath, npmrcContent);
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t .npmrc ƒë·ªÉ s·ª≠ d·ª•ng SWC WASM');
    
  } catch (error) {
    console.error(`‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t @next/swc-wasm-nodejs: ${error.message}`);
  }
}

// S·ª≠a l·ªói next.config.js
console.log('üìù Ki·ªÉm tra v√† s·ª≠a next.config.js...');
const nextConfigPath = path.join(__dirname, 'next.config.js');

if (fs.existsSync(nextConfigPath)) {
  let configContent = fs.readFileSync(nextConfigPath, 'utf8');
  
  // Ki·ªÉm tra xem c√≥ swcMinify ho·∫∑c swcLoader kh√¥ng
  const hasSwcMinify = configContent.includes('swcMinify');
  const hasSwcLoader = configContent.includes('swcLoader');
  
  if (hasSwcMinify || hasSwcLoader) {
    console.log(`‚ö†Ô∏è T√¨m th·∫•y t√πy ch·ªçn kh√¥ng h·ª£p l·ªá trong next.config.js: ${hasSwcMinify ? 'swcMinify' : ''} ${hasSwcLoader ? 'swcLoader' : ''}`);
    
    // Thay th·∫ø c√°c t√πy ch·ªçn kh√¥ng h·ª£p l·ªá
    if (hasSwcMinify) {
      configContent = configContent.replace(/swcMinify\s*:\s*[^,}]+/g, '// swcMinify removed');
    }
    
    if (hasSwcLoader) {
      configContent = configContent.replace(/swcLoader\s*:\s*[^,}]+/g, '// swcLoader removed');
    }
    
    fs.writeFileSync(nextConfigPath, configContent);
    console.log('‚úÖ ƒê√£ x√≥a c√°c t√πy ch·ªçn kh√¥ng h·ª£p l·ªá trong next.config.js');
  } else {
    console.log('‚úÖ Kh√¥ng t√¨m th·∫•y t√πy ch·ªçn kh√¥ng h·ª£p l·ªá trong next.config.js');
  }
} else {
  console.log(`‚ùå Kh√¥ng t√¨m th·∫•y t·ªáp next.config.js t·∫°i: ${nextConfigPath}`);
}

console.log('üîç S·ª≠a l·ªói app-paths-manifest.json...');
const appPathsManifestPath = path.join(__dirname, '.next', 'server', 'app-paths-manifest.json');
const serverDir = path.join(__dirname, '.next', 'server');

if (!fs.existsSync(serverDir)) {
  fs.mkdirSync(serverDir, { recursive: true });
  console.log(`‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: ${serverDir}`);
}

if (!fs.existsSync(appPathsManifestPath)) {
  const defaultManifest = {
    "/": "app/page.js",
    "/products": "app/products/page.js",
    "/products/[id]": "app/products/[id]/page.js"
  };
  
  fs.writeFileSync(appPathsManifestPath, JSON.stringify(defaultManifest, null, 2));
  console.log(`‚úÖ ƒê√£ t·∫°o t·ªáp: ${appPathsManifestPath}`);
}

console.log('=== ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói SWC ===');
console.log('üöÄ Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng b·∫±ng l·ªánh: npm run dev'); 