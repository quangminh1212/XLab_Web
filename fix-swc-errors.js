const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîß Fixing SWC (Rust Compiler) issues completely...');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c d·ª± √°n
const projectRoot = __dirname;

// 1. C·∫≠p nh·∫≠t next.config.js ƒë·ªÉ t·∫Øt SWC
const nextConfigPath = path.join(projectRoot, 'next.config.js');
let nextConfig = '';

if (fs.existsSync(nextConfigPath)) {
  nextConfig = fs.readFileSync(nextConfigPath, 'utf8');
  
  // Sao l∆∞u file c·∫•u h√¨nh
  fs.writeFileSync(`${nextConfigPath}.backup`, nextConfig);
  console.log(`‚úÖ Backed up next.config.js to next.config.js.backup`);
  
  // Ki·ªÉm tra c·∫•u tr√∫c file v√† th√™m c·∫•u h√¨nh m·ªõi
  if (nextConfig.includes('module.exports')) {
    // N·∫øu file c√≥ ƒë·ªãnh d·∫°ng module.exports = {...}
    if (nextConfig.includes('experimental:')) {
      // N·∫øu ƒë√£ c√≥ experimental, th√™m c·∫•u h√¨nh v√†o
      nextConfig = nextConfig.replace(
        /experimental\s*:\s*{/,
        'experimental: {\n    swcTraceProfiling: false,\n    forceSwcTransforms: true,\n    incrementalCacheHandlerPath: false,\n    useWasmBinary: true,\n    '
      );
    } else {
      // N·∫øu ch∆∞a c√≥ experimental, th√™m m·ªõi
      nextConfig = nextConfig.replace(
        /module\.exports\s*=\s*{/,
        'module.exports = {\n  experimental: {\n    swcTraceProfiling: false,\n    forceSwcTransforms: true,\n    incrementalCacheHandlerPath: false,\n    useWasmBinary: true,\n  },'
      );
    }
    
    // Thay th·∫ø c·∫•u h√¨nh swcMinify n·∫øu c√≥
    if (nextConfig.includes('swcMinify')) {
      nextConfig = nextConfig.replace(/swcMinify\s*:\s*true/, 'swcMinify: false');
    } else {
      // Th√™m swcMinify n·∫øu ch∆∞a c√≥
      nextConfig = nextConfig.replace(
        /module\.exports\s*=\s*{/,
        'module.exports = {\n  swcMinify: false,'
      );
    }
  } else {
    // N·∫øu file kh√¥ng theo ƒë·ªãnh d·∫°ng standard, t·∫°o file m·ªõi
    nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  swcMinify: false,
  experimental: {
    swcTraceProfiling: false,
    forceSwcTransforms: true,
    incrementalCacheHandlerPath: false,
    useWasmBinary: true,
  }
};

module.exports = nextConfig;
`;
  }
  
  // L∆∞u c·∫•u h√¨nh m·ªõi
  fs.writeFileSync(nextConfigPath, nextConfig);
  console.log('‚úÖ Updated next.config.js with optimized SWC settings');
} else {
  console.log('‚ùå next.config.js not found, creating new one...');
  
  // T·∫°o file c·∫•u h√¨nh m·ªõi
  nextConfig = `/** @type {import('next').NextConfig} */
const nextConfig = {
  swcMinify: false,
  experimental: {
    swcTraceProfiling: false,
    forceSwcTransforms: true,
    incrementalCacheHandlerPath: false,
    useWasmBinary: true,
  }
};

module.exports = nextConfig;
`;
  fs.writeFileSync(nextConfigPath, nextConfig);
  console.log('‚úÖ Created new next.config.js with optimized SWC settings');
}

// 2. C·∫≠p nh·∫≠t .npmrc ƒë·ªÉ s·ª≠ d·ª•ng WASM thay v√¨ native
const npmrcPath = path.join(projectRoot, '.npmrc');
let npmrcContent = '';

if (fs.existsSync(npmrcPath)) {
  npmrcContent = fs.readFileSync(npmrcPath, 'utf8');
  
  if (!npmrcContent.includes('next_use_wasm=1')) {
    npmrcContent += '\nnext_use_wasm=1\nnext-swc-wasm=true\n';
    fs.writeFileSync(npmrcPath, npmrcContent);
    console.log('‚úÖ Updated .npmrc to use WASM');
  } else {
    console.log('‚ÑπÔ∏è .npmrc already configured to use WASM');
  }
} else {
  npmrcContent = 'next_use_wasm=1\nnext-swc-wasm=true\n';
  fs.writeFileSync(npmrcPath, npmrcContent);
  console.log('‚úÖ Created .npmrc to use WASM');
}

// 3. C√†i ƒë·∫∑t c√°c g√≥i SWC-WASM c·∫ßn thi·∫øt
console.log('üì¶ Installing SWC WASM packages...');
try {
  execSync('npm install --save-dev @next/swc-wasm-nodejs', { stdio: 'inherit' });
  console.log('‚úÖ Installed @next/swc-wasm-nodejs successfully');
} catch (error) {
  console.log(`‚ùå Error installing SWC WASM packages: ${error.message}`);
}

// 4. X√≥a th∆∞ m·ª•c cache c·ªßa Next.js
const cachePaths = [
  path.join(projectRoot, '.next', 'cache'),
  path.join(projectRoot, 'node_modules', '.cache')
];

cachePaths.forEach(cachePath => {
  if (fs.existsSync(cachePath)) {
    try {
      // S·ª≠ d·ª•ng fs.rmSync thay v√¨ rimraf
      fs.rmSync(cachePath, { recursive: true, force: true });
      console.log(`‚úÖ Cleared cache: ${cachePath}`);
    } catch (error) {
      console.log(`‚ùå Error clearing cache ${cachePath}: ${error.message}`);
    }
  }
});

// T·∫°o l·∫°i th∆∞ m·ª•c cache
cachePaths.forEach(cachePath => {
  try {
    if (!fs.existsSync(cachePath)) {
      fs.mkdirSync(cachePath, { recursive: true });
      console.log(`‚úÖ Created directory: ${cachePath}`);
    }
  } catch (error) {
    console.log(`‚ùå Error creating directory ${cachePath}: ${error.message}`);
  }
});

// 5. T·∫°o bi·∫øn m√¥i tr∆∞·ªùng n·∫øu c·∫ßn
const envLocalPath = path.join(projectRoot, '.env.local');
let envLocalContent = '';

if (fs.existsSync(envLocalPath)) {
  envLocalContent = fs.readFileSync(envLocalPath, 'utf8');
  
  if (!envLocalContent.includes('NEXT_TELEMETRY_DISABLED=1')) {
    envLocalContent += '\nNEXT_TELEMETRY_DISABLED=1\n';
    fs.writeFileSync(envLocalPath, envLocalContent);
    console.log('‚úÖ Updated .env.local with telemetry disabled');
  }
} else {
  envLocalContent = 'NEXT_TELEMETRY_DISABLED=1\n';
  fs.writeFileSync(envLocalPath, envLocalContent);
  console.log('‚úÖ Created .env.local with telemetry disabled');
}

console.log('\nüöÄ SWC fixes applied successfully. Please restart your Next.js application with:');
console.log('npm run dev'); 