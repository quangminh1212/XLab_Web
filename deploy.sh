#!/bin/bash

# ========================================
# XLab Web - Production Deployment Script
# ========================================
# Script t√≠ch h·ª£p ƒë·ªÉ deploy ·ª©ng d·ª•ng Next.js v·ªõi HTTPS
# Bao g·ªìm: Build, PM2, Nginx, SSL Certificate

set -e

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# C·∫•u h√¨nh
DOMAIN="xlab.id.vn"
APP_NAME="xlab-web"
APP_PORT="3000"
PROJECT_DIR="/mnt/persist/workspace"
EMAIL="xlab.rnd@gmail.com"

# Banner
echo -e "${PURPLE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    XLab Web Deployment                      ‚ïë"
echo "‚ïë                  Production Setup Script                    ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Ki·ªÉm tra quy·ªÅn sudo
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn sudo${NC}"
    echo "S·ª≠ d·ª•ng: sudo bash deploy.sh"
    exit 1
fi

# H√†m hi·ªÉn th·ªã ti·∫øn tr√¨nh
show_progress() {
    echo -e "\n${CYAN}‚ñ∂ $1${NC}"
}

# H√†m ki·ªÉm tra th√†nh c√¥ng
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# H√†m hi·ªÉn th·ªã c·∫£nh b√°o
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# H√†m hi·ªÉn th·ªã l·ªói
show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# 1. Ki·ªÉm tra h·ªá th·ªëng
show_progress "Ki·ªÉm tra h·ªá th·ªëng v√† dependencies..."

# Ki·ªÉm tra Node.js
if ! command -v node &> /dev/null; then
    show_error "Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    exit 1
fi

# Ki·ªÉm tra npm
if ! command -v npm &> /dev/null; then
    show_error "npm ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    exit 1
fi

# Hi·ªÉn th·ªã th√¥ng tin h·ªá th·ªëng
CURRENT_IP=$(curl -s ifconfig.me)
NODE_VERSION=$(node --version)
NPM_VERSION=$(npm --version)

echo -e "${BLUE}üìã Th√¥ng tin h·ªá th·ªëng:${NC}"
echo "- IP m√°y ch·ªß: $CURRENT_IP"
echo "- Domain: $DOMAIN"
echo "- Node.js: $NODE_VERSION"
echo "- npm: $NPM_VERSION"
echo "- Project: $PROJECT_DIR"

# 2. Ki·ªÉm tra DNS
show_progress "Ki·ªÉm tra DNS configuration..."

DNS_IP=$(dig +short $DOMAIN @8.8.8.8 | tail -n1)
if [ "$DNS_IP" != "$CURRENT_IP" ]; then
    show_warning "DNS ch∆∞a tr·ªè ƒë√∫ng IP!"
    echo "- DNS hi·ªán t·∫°i: $DNS_IP"
    echo "- IP m√°y ch·ªß: $CURRENT_IP"
    echo ""
    read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        show_error "Vui l√≤ng c·∫≠p nh·∫≠t DNS tr∆∞·ªõc khi ti·∫øp t·ª•c"
        exit 1
    fi
else
    show_success "DNS ƒë√£ tr·ªè ƒë√∫ng IP"
fi

# 3. C√†i ƒë·∫∑t dependencies h·ªá th·ªëng
show_progress "C√†i ƒë·∫∑t dependencies h·ªá th·ªëng..."

# C·∫≠p nh·∫≠t package list
apt update -qq

# C√†i ƒë·∫∑t Nginx n·∫øu ch∆∞a c√≥
if ! command -v nginx &> /dev/null; then
    show_progress "C√†i ƒë·∫∑t Nginx..."
    apt install -y nginx
    show_success "Nginx ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    show_success "Nginx ƒë√£ c√≥ s·∫µn"
fi

# C√†i ƒë·∫∑t Certbot n·∫øu ch∆∞a c√≥
if ! command -v certbot &> /dev/null; then
    show_progress "C√†i ƒë·∫∑t Certbot..."
    apt install -y certbot python3-certbot-nginx
    show_success "Certbot ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    show_success "Certbot ƒë√£ c√≥ s·∫µn"
fi

# C√†i ƒë·∫∑t PM2 n·∫øu ch∆∞a c√≥
if ! command -v pm2 &> /dev/null; then
    show_progress "C√†i ƒë·∫∑t PM2..."
    npm install -g pm2
    show_success "PM2 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
else
    show_success "PM2 ƒë√£ c√≥ s·∫µn"
fi

# 4. Chu·∫©n b·ªã ·ª©ng d·ª•ng
show_progress "Chu·∫©n b·ªã ·ª©ng d·ª•ng Next.js..."

cd $PROJECT_DIR

# C√†i ƒë·∫∑t dependencies
show_progress "C√†i ƒë·∫∑t npm dependencies..."
npm ci --production=false
show_success "Dependencies ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"

# Build ·ª©ng d·ª•ng
show_progress "Build ·ª©ng d·ª•ng Next.js..."
npm run build
show_success "·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c build"

# 5. C·∫•u h√¨nh PM2
show_progress "C·∫•u h√¨nh PM2..."

# D·ª´ng ·ª©ng d·ª•ng c≈© n·∫øu c√≥
pm2 stop $APP_NAME 2>/dev/null || true
pm2 delete $APP_NAME 2>/dev/null || true

# Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng v·ªõi PM2
pm2 start npm --name "$APP_NAME" -- start
pm2 save
pm2 startup

show_success "PM2 ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"

# 6. C·∫•u h√¨nh Nginx
show_progress "C·∫•u h√¨nh Nginx..."

# T·∫°o c·∫•u h√¨nh Nginx
cat > /etc/nginx/sites-available/$DOMAIN << 'EOF'
# HTTP server - redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name xlab.id.vn www.xlab.id.vn;
    return 301 https://$server_name$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name xlab.id.vn www.xlab.id.vn;

    # SSL Configuration (will be updated by Certbot)
    ssl_certificate /etc/letsencrypt/live/xlab.id.vn/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xlab.id.vn/privkey.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Proxy to Next.js
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Security - deny access to sensitive files
    location ~ /\. { deny all; access_log off; log_not_found off; }
    location ~ /(\.env|node_modules|package\.json) { deny all; }

    # Logs
    access_log /var/log/nginx/xlab.id.vn.access.log;
    error_log /var/log/nginx/xlab.id.vn.error.log;
}
EOF

# K√≠ch ho·∫°t site
if [ -L /etc/nginx/sites-enabled/default ]; then
    unlink /etc/nginx/sites-enabled/default
fi

ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/

# Ki·ªÉm tra c·∫•u h√¨nh Nginx
if nginx -t; then
    show_success "C·∫•u h√¨nh Nginx h·ª£p l·ªá"
    systemctl restart nginx
    systemctl enable nginx
    show_success "Nginx ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i"
else
    show_error "C·∫•u h√¨nh Nginx c√≥ l·ªói"
    exit 1
fi

# 7. Thi·∫øt l·∫≠p SSL Certificate
show_progress "Thi·∫øt l·∫≠p SSL Certificate..."

# Ki·ªÉm tra xem Next.js c√≥ ƒëang ch·∫°y kh√¥ng
if ! curl -s http://localhost:$APP_PORT > /dev/null; then
    show_error "Next.js kh√¥ng ch·∫°y tr√™n port $APP_PORT"
    exit 1
fi

# L·∫•y SSL certificate
if certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email $EMAIL --redirect; then
    show_success "SSL certificate ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
else
    show_warning "Kh√¥ng th·ªÉ l·∫•y SSL certificate. C√≥ th·ªÉ do DNS ch∆∞a propagate ho√†n to√†n"
    echo "B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i l·ªánh sau khi DNS ƒë√£ c·∫≠p nh·∫≠t:"
    echo "sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN"
fi

# Thi·∫øt l·∫≠p auto-renewal
systemctl enable certbot.timer
systemctl start certbot.timer
show_success "ƒê√£ thi·∫øt l·∫≠p t·ª± ƒë·ªông gia h·∫°n SSL"

# 8. Ki·ªÉm tra final
show_progress "Ki·ªÉm tra final..."

# Ki·ªÉm tra PM2
if pm2 list | grep -q $APP_NAME; then
    show_success "PM2 ƒëang ch·∫°y ·ª©ng d·ª•ng"
else
    show_warning "PM2 c√≥ v·∫•n ƒë·ªÅ"
fi

# Ki·ªÉm tra Nginx
if systemctl is-active --quiet nginx; then
    show_success "Nginx ƒëang ho·∫°t ƒë·ªông"
else
    show_warning "Nginx c√≥ v·∫•n ƒë·ªÅ"
fi

# Ki·ªÉm tra HTTPS
if curl -s https://$DOMAIN > /dev/null 2>&1; then
    show_success "HTTPS ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
else
    show_warning "HTTPS c√≥ th·ªÉ ch∆∞a ho·∫°t ƒë·ªông ho√†n to√†n"
fi

# 9. Ho√†n th√†nh
echo -e "\n${GREEN}üéâ DEPLOYMENT HO√ÄN TH√ÄNH!${NC}"
echo -e "${BLUE}üìã Th√¥ng tin:${NC}"
echo "- Website: https://$DOMAIN"
echo "- PM2 App: $APP_NAME"
echo "- Nginx Config: /etc/nginx/sites-available/$DOMAIN"
echo "- SSL Certificate: Let's Encrypt"
echo "- Auto-renewal: Enabled"

echo -e "\n${YELLOW}üìù C√°c l·ªánh h·ªØu √≠ch:${NC}"
echo "- Xem logs PM2: pm2 logs $APP_NAME"
echo "- Restart app: pm2 restart $APP_NAME"
echo "- Xem logs Nginx: tail -f /var/log/nginx/$DOMAIN.access.log"
echo "- Test SSL: curl -I https://$DOMAIN"

echo -e "\n${CYAN}üîó Ki·ªÉm tra:${NC}"
echo "- SSL Test: https://www.ssllabs.com/ssltest/"
echo "- Security Headers: https://securityheaders.com/"
echo "- Performance: https://pagespeed.web.dev/"

echo -e "\n${GREEN}‚úÖ Deployment script ho√†n t·∫•t!${NC}"
