/**
 * XLab Web - Fix All Errors
 * 
 * Script t·ªïng h·ª£p s·ª≠a t·∫•t c·∫£ c√°c l·ªói cho Next.js
 * K·∫øt h·ª£p c√°c ch·ª©c nƒÉng t·ª´:
 * - fix-chunks-final.js
 * - fix-next-chunks.js
 * - fix-products-json.js
 * - fix-trace-error.js
 */

const fs = require('fs');
const path = require('path');

console.log('=== B·∫Øt ƒë·∫ßu c√¥ng c·ª• XLab Web Utility Toolkit ===');
console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh s·ª≠a l·ªói to√†n di·ªán...');

// ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ t·∫Øt t√≠nh nƒÉng trace
process.env.NEXT_DISABLE_TRACE = '1';
process.env.NEXT_TRACING_MODE = '0';
process.env.NEXT_TELEMETRY_DISABLED = '1';
process.env.NEXT_IGNORE_WARNINGS = 'NEXT_PACKAGE_WARNING,ESLINT_WARNING,API_ROUTE_IMPORT_WARNING';

// ƒê∆∞·ªùng d·∫´n c√°c th∆∞ m·ª•c quan tr·ªçng
const rootDir = process.cwd();
const nextDir = path.join(rootDir, '.next');
const serverDir = path.join(nextDir, 'server');
const staticDir = path.join(nextDir, 'static');
const cacheDir = path.join(nextDir, 'cache');
const productsJsonPath = path.join(rootDir, 'src/data/products.json');
const productsIdChunksDir = path.join(staticDir, 'chunks', 'app', 'products', '[id]');

// H√†m t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
function ensureDirectoryExists(dirPath) {
  try {
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c ${dirPath}: ${error.message}`);
  }
}

// H√†m t·∫°o file v·ªõi n·ªôi dung
function createFileWithContent(filePath, content) {
  try {
    fs.writeFileSync(filePath, content);
    return true;
  } catch (error) {
    console.error(`‚ùå L·ªói khi t·∫°o file ${filePath}: ${error.message}`);
    return false;
  }
}

// H√†m x√≥a file n·∫øu t·ªìn t·∫°i
function deleteFileIfExists(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      return true;
    }
  } catch (error) {
    console.error(`‚ùå L·ªói khi x√≥a file ${filePath}: ${error.message}`);
  }
  return false;
}

// ƒê·∫£m b·∫£o th∆∞ m·ª•c src/data t·ªìn t·∫°i
ensureDirectoryExists(path.join(rootDir, 'src/data'));

// 1. S·ª≠a l·ªói file products.json
function fixProductsJson() {
  console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a l·ªói file products.json...');
  
  const dataDir = path.join(rootDir, 'src/data');
  if (!fs.existsSync(dataDir)) {
    ensureDirectoryExists(dataDir);
  }
  
  if (!fs.existsSync(productsJsonPath)) {
    console.log('‚ö†Ô∏è File products.json kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi');
    createFileWithContent(productsJsonPath, JSON.stringify([], null, 2));
    return;
  }
  
  try {
    // ƒê·ªçc file products.json
    const rawData = fs.readFileSync(productsJsonPath, 'utf8');
    console.log(`üìÇ ƒê√£ ƒë·ªçc file products.json, dung l∆∞·ª£ng: ${rawData.length} bytes`);
    
    // Ki·ªÉm tra v√† s·ª≠a l·ªói c√∫ ph√°p JSON
    let fixedData = rawData;
    try {
      JSON.parse(rawData);
      console.log('‚úÖ Kh√¥ng ph√°t hi·ªán l·ªói c√∫ ph√°p JSON');
    } catch (parseError) {
      console.error('‚ö†Ô∏è L·ªói c√∫ ph√°p JSON:', parseError.message);
      
      // S·ª≠a l·ªói c√∫ ph√°p ph·ªï bi·∫øn
      fixedData = fixedData.replace(/}\s*"/g, '},"');
      fixedData = fixedData.replace(/,\s*}/g, '}');
      fixedData = fixedData.replace(/,\s*]/g, ']');
      
      try {
        JSON.parse(fixedData);
        console.log('‚úÖ ƒê√£ s·ª≠a l·ªói c√∫ ph√°p JSON th√†nh c√¥ng');
      } catch (newError) {
        console.error('‚ùå Kh√¥ng th·ªÉ t·ª± ƒë·ªông s·ª≠a JSON:', newError.message);
        return;
      }
    }
    
    // Ph√¢n t√≠ch JSON
    const products = JSON.parse(fixedData);
    console.log(`üìä ƒê√£ t·∫£i ${products.length} s·∫£n ph·∫©m`);
    
    // Ki·ªÉm tra v√† chu·∫©n h√≥a ID s·∫£n ph·∫©m
    const idRegex = /^[a-z0-9-]+$/;
    let needsUpdate = false;
    
    products.forEach(product => {
      if (!product.id || !idRegex.test(product.id)) {
        needsUpdate = true;
      }
    });
    
    if (needsUpdate) {
      // C·∫≠p nh·∫≠t ID s·∫£n ph·∫©m n·∫øu c·∫ßn
      const updatedProducts = products.map(product => {
        if (!product.id || !idRegex.test(product.id)) {
          const newId = generateIdFromName(product.name);
          return { ...product, id: newId };
        }
        return product;
      });
      
      // L∆∞u l·∫°i file ƒë√£ c·∫≠p nh·∫≠t
      fs.writeFileSync(productsJsonPath, JSON.stringify(updatedProducts, null, 2), 'utf8');
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file products.json v·ªõi ID m·ªõi');
    } else {
      console.log('‚úÖ T·∫•t c·∫£ ID s·∫£n ph·∫©m ƒë√£ ·ªü ƒë√∫ng ƒë·ªãnh d·∫°ng');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω file products.json:', error);
  }
}

// H√†m t·∫°o ID t·ª´ t√™n s·∫£n ph·∫©m
function generateIdFromName(name) {
  return name
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '')  // X√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/[\s_-]+/g, '-')   // Thay kho·∫£ng tr·∫Øng v√† g·∫°ch d∆∞·ªõi b·∫±ng g·∫°ch ngang
    .replace(/^-+|-+$/g, '');   // X√≥a g·∫°ch ngang ·ªü ƒë·∫ßu/cu·ªëi
}

// 2. S·ª≠a l·ªói trace v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng Next.js
function fixTraceAndPrepareNextEnvironment() {
  console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a l·ªói trace v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng Next.js...');
  
  // X·ª≠ l√Ω file trace
  fixTraceFile();
  
  // T·∫°o middleware-manifest.json
  createMiddlewareManifest();
  
  // T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
  createRequiredDirectories();
  
  // T·∫°o c√°c file c·∫ßn thi·∫øt
  createRequiredFiles();
}

// 2.1 X·ª≠ l√Ω file trace
function fixTraceFile() {
  console.log('üîç X·ª≠ l√Ω file trace...');
  
  // T·∫°o th∆∞ m·ª•c .next n·∫øu kh√¥ng t·ªìn t·∫°i
  ensureDirectoryExists(nextDir);
  
  // X√≥a file trace n·∫øu t·ªìn t·∫°i
  const tracePath = path.join(nextDir, 'trace');
  deleteFileIfExists(tracePath);
  
  // X√≥a t·∫•t c·∫£ c√°c file trace.* n·∫øu t·ªìn t·∫°i
  const tracePattern = /^trace\..+/;
  try {
    if (fs.existsSync(nextDir)) {
      fs.readdirSync(nextDir).forEach(file => {
        if (tracePattern.test(file)) {
          try {
            fs.unlinkSync(path.join(nextDir, file));
            console.log(`‚úÖ ƒê√£ x√≥a file ${file}`);
          } catch (err) {
            console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a file ${file}:`, err);
          }
        }
      });
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a c√°c file trace:', error);
  }
  
  // T·∫°o file .traceignore
  const traceIgnorePath = path.join(rootDir, '.traceignore');
  const traceIgnoreContent = `
# Ignore all files in node_modules
**/node_modules/**
# Ignore all files in .next
**/.next/**
# Ignore all dot files
**/.*
  `.trim();
  
  createFileWithContent(traceIgnorePath, traceIgnoreContent);
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t x·ª≠ l√Ω file trace');
}

// 2.2 T·∫°o middleware-manifest.json
function createMiddlewareManifest() {
  console.log('üìÑ T·∫°o middleware-manifest.json...');
  
  ensureDirectoryExists(serverDir);
  
  const manifestPath = path.join(serverDir, 'middleware-manifest.json');
  const manifestContent = JSON.stringify({
    middleware: {
      "/": {
        env: [],
        files: [],
        name: "default",
        page: "/",
        regexp: "^/(?!_next|api).*$"
      }
    },
    functions: {},
    version: 2
  }, null, 2);
  
  // T·∫°o file m·ªõi
  createFileWithContent(manifestPath, manifestContent);
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o middleware-manifest.json');
}

// 2.3 T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
function createRequiredDirectories() {
  console.log('üìÅ T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt...');
  
  // Th∆∞ m·ª•c server v√† c√°c th∆∞ m·ª•c con
  ensureDirectoryExists(path.join(serverDir, 'app'));
  ensureDirectoryExists(path.join(serverDir, 'pages'));
  ensureDirectoryExists(path.join(serverDir, 'chunks'));
  ensureDirectoryExists(path.join(serverDir, 'vendor-chunks'));
  
  // Th∆∞ m·ª•c static v√† c√°c th∆∞ m·ª•c con
  ensureDirectoryExists(path.join(staticDir, 'chunks'));
  ensureDirectoryExists(path.join(staticDir, 'chunks', 'app'));
  ensureDirectoryExists(path.join(staticDir, 'chunks', 'app', 'products'));
  ensureDirectoryExists(productsIdChunksDir);
  ensureDirectoryExists(path.join(staticDir, 'css'));
  ensureDirectoryExists(path.join(staticDir, 'css', 'app'));
  ensureDirectoryExists(path.join(staticDir, 'webpack'));
  
  // Th∆∞ m·ª•c cache
  ensureDirectoryExists(path.join(cacheDir, 'webpack'));
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt');
}

// 2.4 T·∫°o c√°c file c·∫ßn thi·∫øt
function createRequiredFiles() {
  console.log('üìù T·∫°o c√°c file c·∫ßn thi·∫øt...');
  
  // T·∫°o app-paths-manifest.json
  const appPathsManifestPath = path.join(serverDir, 'app-paths-manifest.json');
  const appPathsManifestContent = JSON.stringify({
    "/": "app/page.js",
    "/products": "app/products/page.js",
    "/products/[id]": "app/products/[id]/page.js"
  }, null, 2);
  createFileWithContent(appPathsManifestPath, appPathsManifestContent);
  
  // T·∫°o build-manifest.json
  const buildManifestPath = path.join(serverDir, 'build-manifest.json');
  const buildManifestContent = JSON.stringify({
    "polyfillFiles": [
      "static/chunks/polyfills-c67a75d1b6f99dc8.js"
    ],
    "rootMainFiles": [],
    "pages": {
      "/_app": [
        "static/chunks/main-app-d8ba92bc9d4aa4e9.js",
        "static/chunks/webpack-59c5c889f52620d6.js",
        "static/chunks/main.a11d1ff1cfd7b4c3.js"
      ],
      "/_error": [
        "static/chunks/main-app-d8ba92bc9d4aa4e9.js",
        "static/chunks/webpack-59c5c889f52620d6.js",
        "static/chunks/main.a11d1ff1cfd7b4c3.js"
      ]
    },
    "ampFirstPages": []
  }, null, 2);
  createFileWithContent(buildManifestPath, buildManifestContent);
  
  // T·∫°o css file m·∫´u
  const cssFilePath = path.join(staticDir, 'css', 'app', 'layout.css');
  createFileWithContent(cssFilePath, '/* Fixed empty CSS file */');
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o c√°c file c·∫ßn thi·∫øt');
}

// 3. S·ª≠a l·ªói chunk load
function fixChunkLoadError() {
  console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a l·ªói chunk load...');
  
  // T·∫°o file chunk c∆° b·∫£n
  createBasicChunkFiles();
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t s·ª≠a l·ªói chunk load');
}

// 3.1 T·∫°o c√°c file chunk c∆° b·∫£n
function createBasicChunkFiles() {
  console.log('üìÑ T·∫°o c√°c file chunk c∆° b·∫£n...');
  
  // Empty chunk file for [id] page
  const productDetailChunkPath = path.join(productsIdChunksDir, 'page.js');
  createFileWithContent(productDetailChunkPath, '/* Fixed product detail chunk */');
  
  // T·∫°o file main-app.js
  const mainAppPath = path.join(staticDir, 'main-app.js');
  createFileWithContent(mainAppPath, '/* Fixed main-app.js */');
  
  // T·∫°o file app-pages-internals.js
  const appPagesInternalsPath = path.join(staticDir, 'app-pages-internals.js');
  createFileWithContent(appPagesInternalsPath, '/* Fixed app-pages-internals.js */');
  
  console.log('‚úÖ ƒê√£ ho√†n t·∫•t t·∫°o c√°c file chunk c∆° b·∫£n');
}

// 4. C·∫≠p nh·∫≠t .gitignore
function updateGitignore() {
  console.log('üîß B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t .gitignore...');
  
  const gitignorePath = path.join(rootDir, '.gitignore');
  if (!fs.existsSync(gitignorePath)) {
    console.log('‚ö†Ô∏è File .gitignore kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi');
    const basicGitignoreContent = `
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
    `.trim();
    createFileWithContent(gitignorePath, basicGitignoreContent);
    console.log('‚úÖ ƒê√£ t·∫°o file .gitignore c∆° b·∫£n');
    return;
  }
  
  try {
    // ƒê·ªçc n·ªôi dung hi·ªán t·∫°i
    const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    
    // Danh s√°ch c√°c m·ª•c c·∫ßn th√™m n·∫øu ch∆∞a c√≥
    const itemsToAdd = [
      '.next/**/*',
      '**/.next/**/*',
      '.next/cache',
      '.next/server',
      '.next/static',
      '.next/types',
      '.swc-disabled',
      '.traceignore',
      '.env.*',
      'node_modules/.cache'
    ];
    
    // Ki·ªÉm tra v√† th√™m c√°c m·ª•c ch∆∞a c√≥
    let updatedContent = gitignoreContent;
    let addedItems = false;
    
    for (const item of itemsToAdd) {
      if (!gitignoreContent.includes(item)) {
        updatedContent += `\n${item}`;
        addedItems = true;
      }
    }
    
    // Th√™m m·ªôt ph·∫ßn m·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o c√°c file ƒë∆∞·ª£c t·∫°o trong l√∫c ch·∫°y ƒë∆∞·ª£c ignore
    if (addedItems) {
      updatedContent += '\n\n# Th√™m c√°c file ƒë∆∞·ª£c gen ra khi d·ª± √°n ƒëang ch·∫°y';
      fs.writeFileSync(gitignorePath, updatedContent, 'utf8');
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t file .gitignore');
    } else {
      console.log('‚úÖ File .gitignore ƒë√£ ƒë·∫ßy ƒë·ªß, kh√¥ng c·∫ßn c·∫≠p nh·∫≠t');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t .gitignore:', error);
  }
}

// Th·ª±c thi c√°c h√†m ch√≠nh
function main() {
  try {
    // Ti·∫øn h√†nh chu·ªói qu√° tr√¨nh s·ª≠a l·ªói
    fixProductsJson();
    fixTraceAndPrepareNextEnvironment();
    fixChunkLoadError();
    updateGitignore();
    
    console.log('‚ú® Ho√†n t·∫•t qu√° tr√¨nh s·ª≠a l·ªói!');
    console.log('üöÄ D·ª± √°n ƒë√£ s·∫µn s√†ng ƒë·ªÉ ch·∫°y th√†nh c√¥ng.');
    console.log('üåü B·∫°n c√≥ th·ªÉ ch·∫°y "npm run dev" ngay b√¢y gi·ªù.');
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh s·ª≠a l·ªói:', error);
    process.exit(1);
  }
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh
main(); 